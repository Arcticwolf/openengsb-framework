~~
~~	Copyright 2009 OpenEngSB Division, Vienna University of Technology
~~
~~   Licensed under the Apache License, Version 2.0 (the "License");
~~   you may not use this file except in compliance with the License.
~~   You may obtain a copy of the License at
~~
~~       http://www.apache.org/licenses/LICENSE-2.0
~~
~~   Unless required by applicable law or agreed to in writing, software
~~   distributed under the License is distributed on an "AS IS" BASIS,
~~   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~   See the License for the specific language governing permissions and
~~   limitations under the License.
~~
  [ATTENTION:] This page is only a proposal! This means that everyone is allowed to edit this page and it is 
  			   marked for change. This proposal could be seen as design idea and should be discussed in public
  			   and visible for everyone before implemented at all.

Deploy Domain

  This Document describes a generic interface to the deploy domain to be used in engsb.
  To determine the required functionality it has to provide the tools and protocols SCP, HTTP, Maven, Nexus, Archiva and WebDAV were examined.
  An overview of their functionality and required parameters can be found in {{{comparison}Comparison}}. The actual interface in {{{interface}Interface}}. 
  
{Comparison}

*----+-------------+-------------------+-------------------+--------+
|Tool|Functionality|Required parameters|Optional parameters|Comments|
*----+-------------+-------------------+-------------------+--------+
|SCP|Move local file(s) to remote host|(list of) local file(s) and URI to remote location|User's credentials|Done with standard SCP call|
*----+-------------+-------------------+-------------------+--------+
|HTTP|Move local file to remote host|local file and URI to remote location|User's credentials|Done with {{{http://hc.apache.org/httpclient-3.x/methods/put.html}HTTP Client's PUT-Method}}|
*----+-------------+-------------------+-------------------+--------+
|Maven deploy:deploy-file|Deploy local file to remote repository; It is used to import third party jars into a (maven-)repository and does not seem to be intended to work on arbitrary files or arbitrary repositories|file, repositoryId, repositoryLayout, url; also see the {{{http://maven.apache.org/plugins/maven-deploy-plugin/deploy-file-mojo.html}documentation}}|artifactId, classifier, description, generatePom, groupId, packaging, pomFile, uniqueVersion, version; also see the {{{http://maven.apache.org/plugins/maven-deploy-plugin/deploy-file-mojo.html}documentation}}|Done with {{{http://maven.apache.org/plugins/maven-deploy-plugin/apidocs/index.html?index-all.html}DeployFileMojo}}|
*----+-------------+-------------------+-------------------+--------+
|Maven deploy:deploy|Move local maven-artifact to remote maven-repository|none, need to be supplied in pom-file; also see the {{{http://maven.apache.org/plugins/maven-deploy-plugin/deploy-mojo.html}documentation}}|altDeploymentRepository, skip, updateReleaseInfo; also see the {{{http://maven.apache.org/plugins/maven-deploy-plugin/deploy-mojo.html}documentation}}|Done with {{{http://maven.apache.org/plugins/maven-deploy-plugin/apidocs/index.html?index-all.html}DeployMojo}}|
*----+-------------+-------------------+-------------------+--------+
|Nexus|Maven deploy-functionality; Move artifact to Nexus-repository|see Maven deploy|see Maven deploy|also see {{{http://svn.sonatype.org/m2eclipse/trunk/org.maven.ide.eclipse.book/book/ch14s06.html}this article}}|
*----+-------------+-------------------+-------------------+--------+
|Archiva|Maven deploy-functionality; Move artifact to Archiva-repository|pom-file entries; see {{{http://archiva.apache.org/docs/1.1.2/userguide/deploy.html}this article}}|no additional| |
*----+-------------+-------------------+-------------------+--------+
|WebDAV|Maven deploy functionality over webDAV|additionally needs special pom-file entries; see {{{http://archiva.apache.org/docs/1.1.2/userguide/deploy.html}this article}}|no additional|This is not a standalone usecase. DAV is rather utilized as protocol|
*----+-------------+-------------------+-------------------+--------+
Comparison of tools to deploy to/with

  So, where does this lead us? The general purpose file-transferring protocols SCP and HTTP simply need a local file, the remote host plus the path on the remote system (= URI) and possibly some user's credentials. The Maven-based deploy-usecases all need a pom-file for each artifact, that shall be deployed.
  This leads to the conclusion, that the common dynamic functionality is simply to trigger the deploy at all, while all other information will have to be retrieved from static config files (pom-files and/or SU-configuration). However, the deploy-process is usually set up once and does not change much. If at all, it's configuration is extended every now and then. Thus, modeling the domain rather static should not yield a big problem.\
  Let's further examine the details in the {{{interface}Interface section}}.

{Interface}

  As concluded in {{{comparison}Comparison}} the interface only needs to support the actual triggering of the deploy-process.
  This means, that the SU's configuration must hold a list of files/artifacts, that shall be deployed. In the case of SCP and HTTP, we'll aditionally need the URI where to deploy to (possibly per file) and probably user credentials.
  For The Maven-based aproaches, we'll simply need to maintain a list of pom-files in the SU.
  
* Interface methods
  
---
/**
 * Deploys all files listed in the SU's configuration.
 * @return A List of DeployResults, containing an entry for every deployed file, describing the success for this deploy-attempt.
 * @throws DeployException for a generic indication of failure while deploying.
 */
---
  public List\<DeployResult\> execute() throws DeployException;

---
/**
 * Deploys all files listed in the SU's configuration asynchronously.
 * @throws DeployException for a generic indication of failure while deploying.
 */
---
  public void executeAsynchronous() throws DeployException;

---
/**
 * Deploys a single file. The file must exist and be configured in the SU. 
 * @param file The file to be deployed. A list of files, that may be used for this call can be obtained from listFileToDeploy().
 * @return The DeployResult describing the success for this deploy-attempt.
 * @throws DeployException for a generic indication of failure while deploying.
 */
---
  public DeployResult deployFile (String file) throws DeployException;

---
/**
 * Deploys a single file. The file must exist and be configured in the SU. 
 * @param file The file to be deployed. A list of files, that may be used for this call can be obtained from listFileToDeploy().
 * @throws DeployException for a generic indication of failure while deploying.
 */
---
  public void deployFileAsynchronous (String file) throws DeployException;

---
/**
 * Returns a list of files, configured in the SU.
 * @return A list of configured files.
 */
---
  public String[] listFilesToDeploy();
 
 
 
* Datatypes

---
public class DeployResult
{
	private String	file;
	private String	errorMessage;
	private boolean	success;
	
	public String getFile ()
	{
		return file;
	}
	public String getErrorMessage()
	{
		return errorMessage;
	}
	public boolean wasSuccessful()
	{
		return success;
	}
	public void setFile (String file)
	{
		this.file = file;
	}
	public void setErrorMessage (String errorMessage)
	{
		this.errorMessage = errorMessage;
	}
	public void setSuccess (boolean success)
	{
		this.success = success;
	}
}
---

* Events

---
DeployExecuted
{
	private Date				timestamp;
	private List<DeployResult>	results;
	
	/* with appropriate getters and setters */
}
---
  Triggered on every deploy*-call to notify everybody who wants to know about a deploy.