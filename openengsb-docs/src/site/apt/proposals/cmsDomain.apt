~~
~~	Copyright 2009 OpenEngSB Division, Vienna University of Technology
~~
~~   Licensed under the Apache License, Version 2.0 (the "License");
~~   you may not use this file except in compliance with the License.
~~   You may obtain a copy of the License at
~~
~~       http://www.apache.org/licenses/LICENSE-2.0
~~
~~   Unless required by applicable law or agreed to in writing, software
~~   distributed under the License is distributed on an "AS IS" BASIS,
~~   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~   See the License for the specific language governing permissions and
~~   limitations under the License.
~~
  [ATTENTION:] This page is only a proposal! This means that everyone is allowed to edit this page and it is 
  			   marked for change. This proposal could be seen as design idea and should be discussed in public
  			   and visible for everyone before implemented at all.

CMS Domain

  The comparison is done on the basis of two content management systems. DaisyCMS ({http://daisycms.org}) and 
  Alfresco ({http://alfresco.com}). Alfresco also can be seen as a representativ of CMSs that implement the 
  Java Content Repository specification (JSR 170), such as MagnoliaCMS and HippoCMS, whereas the latter two 
  are using Apache JackRabbit, the open source implementation of JSR 170. Alfresco seems to walk a different 
  way in trying to implement the specification on its own.
  
{Comparison}

*-----------+----------------+------------+--------+
|<<Feature>>|<<Alfresco/JCR>>|<<DaisyCMS>>|Comments|
*----+-------------+-------------------+-------------------+
|Create document|available|available||
*----+-------------+-------------------+-------------------+
|Delete document|available|available||
*----+-------------+-------------------+-------------------+
|Change document|available|available||
*----+-------------+-------------------+-------------------+
|Change document type|available|available||
*----+-------------+-------------------+-------------------+
|Document linking|available|available||
*----+-------------+-------------------+-------------------+
|Add to a collection|not available|available|Alfresco is working in terms of a workspace, which seems to be a little different of what Daisy understands under a collection.|
*----+-------------+-------------------+-------------------+
|Query management|available|available||
*----+-------------+-------------------+-------------------+
|Content type definition|Per configuration|programmatically||
*----+-------------+-------------------+-------------------+
|Versioning|available|available||
*----+-------------+-------------------+-------------------+
|Support for namespaces|available|available|Same meaning as in XML. Namespaces should avoid name/id collision with documents from other repositories|
*----+-------------+-------------------+-------------------+
Comparison of CMSs

{Interface}

  
* Interface Repository
  
---
/**
 * creates a new document
 * @param name Name of the document, which does not have to be unique in the repository
 * @param documentTypeId Id, of which type of document has to be created
 * @return The newly created document
 */
---
  public Document createDocument (String name, long documentTypeId);

---
/**
 * Deletes the given document
 * @param documentId The id of the document to be deleted
 * @throws RepositoryException Thrown if the id can not be found
 */
---
  public void deleteDocument(long documentId) throws RepositoryException;

---
/**
 * Creates a new version of the given document 
 * @param documentId
 * @param copyContent True, if the content of the document should be copied to the returned element. 
 * @return the new element
 * @throws RepositoryException if the document can not be found
 */
---
  public Document createVersion(long documentId, boolean copyContent) throws RepositoryException;

---
/**
 * Deletes a version of a document
 * @param documentId document to be deleted
 * @param versionId version to be deleted
 * @throws RepositoryException Thrown, if the document/version can't be found
 */
---
  public void deleteVersion(long documentId, long versionId) throws RepositoryException;

---
/**
 * Gets a document from the repository
 * @param documentId 
 * @param versionId
 * @return
 * @throws RepositoryException Thrown, if the document/version can't be found.
 */
---
  public Document getDocument(long documentId, long versionId) throws RepositoryException;
 
 
* Interface Document
  
---
/**
 * Changes the type of a document. This is a version-level property.
 * @param documentId
 * @param versionId
 * @param docTypeId
 * @throws RepositoryException
 */
---
  public void changeDocumentType(long documentId, long versionId, long docTypeId) throws RepositoryException;
  
---
/**
 * 
 * @param documentId
 * @param versionId
 * @throws RepositoryException
 */
---
  public void addLink (long documentId, long versionId) throws RepositoryException;