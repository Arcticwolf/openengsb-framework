<?xml version="1.0" encoding="UTF-8"?>
<!--
    
    Licensed to the Austrian Association for Software Tool Integration (AASTI)
    under one or more contributor license agreements. See the NOTICE file
    distributed with this work for additional information regarding copyright
    ownership. The AASTI licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file except in compliance
    with the License. You may obtain a copy of the License at
    
        http://www.apache.org/licenses/LICENSE-2.0
        
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    
-->

<chapter version="5.0"
    xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd   http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd   http://www.w3.org/2001/XMLSchema-instance http://www.w3.org/2001/XMLSchema-instance.xsd"
    xml:id="xlink.openengsb.integration" xmlns="http://docbook.org/ns/docbook"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:ns="http://docbook.org/ns/docbook">

    <title>XLink with OPENENGSB</title>
    
    <section xml:id="openengsb.integration.components">
        <title>Applying the conzept to OPENENGSB components</title>
        <para>The registry component may be implemented as a context sensitive service, context
            sensitive since the mapping is only done for single projects. Its included
            user-interface will be implemented as http-servlet, which will be implementet ontop of a
            http-service. The http-servlet url will be a standard url, the modelobject identifier
            and other nessecary metadata will be transportet via GET parameters.</para>
        <para>For our usecase some basic models will be defined. Models will be assigned to Tool
            Domains. When a client starts, its Tool Connectors register themselfes at the Service
            Bus. During this, every connector can announce if it wants to take part in linking. If
            this is the case, the connector gets a model assigned from his Tool Domain, in the form
            of a link-template string.  In this way every tool can construct correct
            modelobject-links. One Domain may have one or more models assigned but one Tool
            Connector will always have only one model assigned.</para>
        <ns:para>A model´s identifier is defined in the class <ns:code>XLinkIdentifier</ns:code>. It
            is consisting of a List of FieldNames, including their description and optional their
            values. In this way, the class can be used to transfere the description of an Identifier
            to the Tools, but also to genereate the actual Link itself. Fields may be marked as
            'Final', this enables the Registry to pre set values that are not be changed by the
            tools.</ns:para>
        <ns:para>The UrlTemplates are defined in the class <ns:code>XLinkUrlTemplate</ns:code>. It
            is used to transfere the Linkstrukture and additional informations to the CLienttools.
            Optional it offers functions to fill those fields with actual values and automates the
            creation of valid XLinks. There are two methods of interest. The function
                <ns:code>getXLinkUrlTemplate()</ns:code> which returns the LinkTemplate as a String,
            consisting of the URL to the Registry´s HTTP-Servlet and the ModelobjectIdentifier´s
            Fields appended as Parameters. The values of the parameters are set with placeholders of
            the format '$$keyOfField$$'. This offers the tools to simply create valid XLinks by
            replacing the placeholders via regex. The other function
                <ns:code>getXLinkUrl()</ns:code> returns the Link to the Registry´s HTTP-Servlet
            containing the complete Modelobject´s Identifier, but only if all fields have been
            correctly set. Returns null if the Identifier has not been duly completet. Fields can be
            set via <ns:code>setIdentifierField(String key, Object value)</ns:code>.</ns:para>
        <ns:para>An Identifier and an URLTemplate, which can be sent to a tool, can be defined in
            the following way.</ns:para>
        <ns:para>
            <ns:programlisting><![CDATA[XLinkIdentifierField methodField = new XLinkIdentifierField("methodName","Name of Method",String.class);
XLinkIdentifierField classField = new XLinkIdentifierField("className","Name of class",String.class); 
XLinkIdentifierField idField = new XLinkIdentifierField("idNum","id of Field",Integer.class); 
                
ArrayList&lt;XLinkIdentifierField> listOfFields = new ArrayList&lt;XLinkIdentifierField>(); 
listOfFields.add(methodField); 
listOfFields.add(classField); 
listOfFields.add(idField); 
                
XLinkIdentifier identifier = new XLinkIdentifier(listOfFields); 
                
XLinkUrlTemplate url = new XLinkUrlTemplate("http://openengsb.org/registry.html",identifier);]]></ns:programlisting>
        </ns:para>
        <para>The method <ns:code>url.getXLinkUrlTemplate()</ns:code> returns the
            LinkTemplate.</para>
        <ns:para>
            <ns:programlisting>http://openengsb.org/registry.html?idNum=$$idNum$$&amp;className=$$className$$&amp;identifierTemplateId=3a4d1aac-d0f9-4c52-bb93-16978e9df237&amp;methodName=$$methodName$$</ns:programlisting>
        </ns:para>
        <para>Note that the 'identifierTemplateId' was appended by the class itself. This id is
            nessecary to fetch the corresponding template later on. The id may also be manualy
            defined. The next steps set the values of the fields.</para>
        <ns:para>
            <ns:programlisting><![CDATA[int num = 4;

url.setIdentifierField("methodName", "methodHugo");
url.setIdentifierField("className", "classHugo");
url.setIdentifierField("idNum", num);]]></ns:programlisting>
        </ns:para>
        <para>Now the method <ns:code>url.getXLinkUrl()</ns:code> returns a valid Xlink.</para>
        <ns:para>
            <ns:programlisting>http://openengsb.org/registry.html?idNum=4&amp;className=classHugo&amp;identifierTemplateId=955d9aa6-00cd-4d3b-b20a-54b89e99c86d&amp;methodName=methodHugo</ns:programlisting>
        </ns:para>
        <ns:para>If a Tool wants to participate in XLinking, it has to call the method
            <ns:programlisting>public XLinkUrlTemplate registerForXLink(ConnectorId id, ConnectorDescription connectorDescpription, HashMap&lt;String,String> availableViews);</ns:programlisting></ns:para>
        <ns:para>defined in the interface <ns:code>ConnectorRegistrationManager</ns:code>. The
            HashMap contains &lt;ViewId, Viewdescription> tuple, which define the views available
            for linking. To enable the registry to push potential matches to the Tool, the Tool has
            to implement the method
            <ns:programlisting>public void openXLinks(Collection&lt;XLinkIdentifier> modelObjects, String viewId);</ns:programlisting></ns:para>
        <ns:para>defined in the interface <ns:code>Domain</ns:code>. </ns:para>
        <para><emphasis role="italic">standartlink für jede domäne mit parameter für entrypoint
            </emphasis>  </para>
        <para><emphasis role="italic">registrieren der connectoren am bus muss erweitert auf IP und
                List&lt;views> Domäne hat je nach connectoren die angemeldet werden, mehrere Modelle
                registriert </emphasis></para>
        <para><emphasis role="italic">Links nur valide für X Tage -> nur in Doku festgelegt. Kann in
                impl determiniert werden ob Link alt ist?</emphasis></para>
    </section>
</chapter>
