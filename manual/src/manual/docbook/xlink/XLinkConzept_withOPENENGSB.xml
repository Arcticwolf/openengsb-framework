<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                         "http://www.docbook.org/xml/4.5/docbookx.dtd">
<article>
    <title>XLink</title>
    <subtitle>Crossprogram linking in Integrated Frameworks with Focus on the OPENENGSB
        Framework</subtitle>
    <articleinfo>
        <address>christoph@prybila.at</address>
        <date>16.02.2012</date>
        <author>
            <personname>
                <firstname>Christoph</firstname>
                <surname>Prybila</surname>
            </personname>
        </author>
        <edition>3.1</edition>
    </articleinfo>
    <sect1>
        <title>Introduction</title>
        <para>This article introduces a concept to enable crossprogram linking in integrated
            frameworks with, so called, XLinks. It highlights the required precodintions, the
            contained logical and architectual components and the sequence of nessecary actions
            undertaken by the users and the components to establish crossprogram linking.</para>
        <para>The following Section describes the general concept of crossprogram linking in
            integrated frameworks. For detailed instructions about the implementation with the
            OPENENGSB framework check <xref linkend="xlink_openengsb"/>.</para>
    </sect1>
    <sect1>
        <title>General Concept of XLink</title>
        <para>TODO Talk about the improvements and possible usecases of XLink with focus on
            interdisciplinary work</para>
        <sect2>
            <title>Preconditions and Assumptions</title>
            <para>TODO Actors, using XLink, know the general destination of their partners Link
                request.</para>
            <para>TODO Define that the used tools work in an integrated framework and therefore are
                connected with a central component, for example a Service Bus.</para>
            <para>The most basic assumption is that data, which is used during everyday work, is
                organized in projects and are therefore loosely semantically related. Every project
                may consist of a variety of files with different content and datatypes. Actors from
                various disciplines are working together on different projects, everyone with their
                appropriate set of tools alias programs. A tool may offer different kinds of views
                on the data it is working on, but it serves a certain general purpose. Bigger tools
                which serve multiple purposes are treated as a suite of standalone tools, everyone
                single one with its own purpose. Therefore it is assumed that tools work on data
                with a similar or related structure. An actor may hold the whole dataset of a
                project or just subset of it. </para>
        </sect2>
        <sect2>
            <title>Logical Components</title>
            <para>Data of a certain datatype which is also edited and organised by intendet tools is
                of a certain structured content. In our concept such similar datastructure is
                represented by a, so called, <emphasis role="bold">model</emphasis>. While a model
                is representing data of a certain structure, it is also defining an appropriate
                    <emphasis role="bold">identifier</emphasis> for this data. In that way, data
                which is represented by a model, is divided through the model´s identifier, into
                instances of the model, called <emphasis role="bold">modelobjects</emphasis>. The
                identifier of a model has to ensure, that each modelobject is unique within the
                model. The structure of the identifier of a model also defines the precision in
                which points of interest in the content can be addressed. Since a datastructure may
                originate from another one, models may be nested in each other. A link to a
                modelobject can now be established by its identifier. Such link may be of the
                structure <emphasis role="bold">Project.Model.Version.Identifier</emphasis>. The
                'version' part of the link, represents the version of the model the identifier was
                created in. The version is metadata for backward compatibility.</para>
            <example>
                <title>Illustrate linking definition</title>
                <para><emphasis role="italic">A programmer is working on a project. Part of the
                    project´s data is java sourcecode. The programmer is working on the project
                    with a java sourcecode editor. Now we define a model called 'OOSourecode'.
                    As identifier we define a string with the structure
                    'package.classname.methodname'. This string is unique within the java
                    sourcecode but also within every other object-oriented sourcecode. Therefore
                    the java sourcecode editor is associated with the model 'OOSourecode' in the
                    registry. The viewed sourcecode is now splitted (semantically) into
                    modelobjects, each modelobject representing a single method within the
                    sourcecode.</emphasis></para>
            </example>
            <para>Every tool offers different views on data but, as assumed, works on data with
                related structure. Every tool organizes data it is working on in his own <emphasis
                    role="bold">toolenviroment</emphasis>. To participate in crossprogram linking, a
                tool is associated with an appropriate model. How modelobjects of ones tool´s
                associated model are connected with the toolenviroment is in the concern of the tool
                itself. Every tool must be able to open or retrieve modelobjects by their
                identifiers. </para>   
            <para>To enable distributed linking between semantically related datapoints, which may
                also be viewed by different tools, a central component, called <emphasis role="bold"
                    >registry</emphasis>, is needed. This registry manages the defined models, the
                association of tools to models and the <emphasis role="bold">mapping</emphasis>
                between modelobjects from different models. This mapping is achieved by <emphasis
                    role="bold">transformation</emphasis> of model identifiers from the format of
                the source model to the format of the destination model. The transformation is done
                by an entity called <emphasis role="bold">mapper</emphasis>. How the transformation
                between the various models is done, is future matter. The first required input to
                calculate or find such a mapping, is a modelobject from the source-model,
                represented by a link as showed above. The second required input is the
                destination-model. The generated output is a set of identifiers in the
                destination-model´s structure. They represent <emphasis role="bold">potential
                    matches</emphasis> to modelobjects which are associated with the
                destination-model. If the generated identifiers correspond to some real modelobjects
                a match was found and a link between different datapoints was made. It may occur
                that no corresponding real modelobject can be found and linking fails. Depending on
                the quality of the transformation, the quality of the structured data and the degree
                of semantical relation a match is more likely to be found, or not. For example,
                crossproject linking may technically be realised but wont be very effective since
                the different datasets may be not semantical related at all. It is also possible
                that there is no possible transformation between two models and no match can be
                generated at all. Because of the different granularity and characteristics of
                identifiers, one modelobject of a model may be associated with multiple modelobjects
                of another model.<figure>
                    <title>XLink Concept (TODO make image dynamic to with)</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="graphics/LinkingConceptGraphic_V3.png" align="center"/>
                        </imageobject>
                    </mediaobject>
                </figure></para>
        </sect2>
        <sect2>
            <title>Architectual Components and Sequence of Actions</title>
            <para>Here we will discuss the needed components and their actions to complete the
                architecture.</para>
            <para>Actors share links of modelobjects via channels like email, when they want to
                highlight points of interest for other actors. When an actor receives a link to a
                modelobject, he wants to open corresponding datapoints in his tools and datasets. To
                make those links easy to call from a wide range of programs, it may be wrapped in an
                url that points to the registry, for example <emphasis role="bold"
                    >http://urlToRegistry.suff/modelobject-link</emphasis>. The registry must be
                able to receive such http requests and act on them. Since we are talking about a
                distributed integration framework, the registry and the tools must also be able to
                communicate reliably over the network. Therefore they must provide interfaces for
                communication. </para>
            <para>As mentioned, the <emphasis role="bold">registry</emphasis> must act as a central
                component to all tools and must therefore be providing it´s services the whole time
                to enable linking. Tools may be up and running or not. When an actor starts his
                client in the integration framework, his installed tools must notify the registry if
                they will participate in linking. During a registration, the registry associates the
                tool with an appropriate model. The tool must connect this model with it´s
                toolenviroment. When an actor clicks on a modelobject url, the registry must read
                the information from this <emphasis role="bold">sourcelink</emphasis> and provide an
                    <emphasis role="bold">user-interface</emphasis> which enables him to
                authenticate himself and to choose a view in which he wants to open corresponding
                datapoints in his dataset. A preselection can be made by filtering the tools and
                views to which no transformation can be done. By determining the tool and view the
                actor also defines the <emphasis role="bold">destination-model</emphasis>, because
                every tool is associated with a model. This user-interface is best realized as
                    <emphasis role="bold">http-servlet</emphasis>. After the actors selection, the
                given sourcelink is transformed into the destination-model´s structure. Next the
                registry calls up the selected tool and sends it the transformation results. Its up
                to the tool, how to open existing corresponding datapoints. It may happen that no
                corresponding datapoints can be found, in that case the actor must be informed.<figure>
                    <title>Example MockUp of Servlet (TODO make image dynamic to with)</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="graphics/sampleServlet_V2.png" align="center"/>
                        </imageobject>
                    </mediaobject>
                </figure></para>
            <para><emphasis role="bold">Tools</emphasis> must be able to open the corresponding
                datapoint to a defined modelobject and to retrieve the corresponding modelobject to
                a defined datapoint. The retrieval of modelobject-links is a manually triggered
                action by the Actor. Every tool and their views must enable the actor to extract the
                link of a selected modelobject. The opening of a datapoint related to a given
                modelobject is an automatically triggered action by the registry. First the actor
                clicks on a modelobject-link (which is wrapped in an url, see above), next he will
                be asked to define the tool and view he wants to open corresponding datapoints, then
                the registry transforms the modelobject link into the destination-model´s identifier
                structure and last sends the results to the tool, to trigger the opening of the
                corresponding datapoint. If no corresponding datapoint can be found by the tool it
                must inform the actor that linking failed.</para>
            <sect3>
                <title>Example Flow of actions</title>
                <para>
                    <orderedlist>
                        <listitem>
                            <para>The actors Adam &amp; Eve start their clients, their tools
                                register themselfes and get a model assigned. <figure>
                                    <title>Step One(TODO make image dynamic to with)</title>
                                    <mediaobject>
                                        <imageobject>
                                            <imagedata fileref="graphics/StepOne.png" align="center"/>
                                        </imageobject>
                                    </mediaobject>
                                </figure>
                            </para>
                        </listitem>
                        <listitem>
                            <para>Adam wants to mark a point of interest in his data for Eve and
                                extracts its XLink (already wrapped as a http-link).</para>
                        </listitem>
                        <listitem>
                            <para>He sends the XLink and some meta information or request via email
                                to Actor Eve. <figure>
                                    <title>Step Two to Three(TODO make image dynamic to
                                        with)</title>
                                    <mediaobject>
                                        <imageobject>
                                            <imagedata fileref="graphics/StepTwoToThree.png"
                                                align="center"/>
                                        </imageobject>
                                    </mediaobject>
                                </figure>
                            </para>
                        </listitem>
                        <listitem>
                            <para>Actor Eve clicks on the link, the servlet of the registry is
                                opened in her browser.</para>
                        </listitem>
                        <listitem>
                            <para>Eve has to authenticate herself.</para>
                        </listitem>
                        <listitem>
                            <para>A list of all installed tools and views is opened. For each view
                                there is information displayed, if a transformation to
                                destination-model can be done, or not.</para>
                        </listitem>
                        <listitem>
                            <para>Actor Eve chooses one view. <figure>
                                    <title>Step Four to Seven(TODO make image dynamic to
                                        with)</title>
                                    <mediaobject>
                                        <imageobject>
                                            <imagedata fileref="graphics/StepFourToSeven.png"
                                                align="center"/>
                                        </imageobject>
                                    </mediaobject>
                                </figure>
                            </para>
                        </listitem>
                        <listitem>
                            <para>The sourcelink is transformed by the mapper, potential matches are
                                created.</para>
                        </listitem>
                        <listitem>
                            <para>The potential matches are now transfered to the tool selected by
                                Eve.</para>
                        </listitem>
                        <listitem>
                            <para>This tool checks, if there are any corresponding local
                                modelobjects.</para>
                        </listitem>
                        <listitem>
                            <para>If one or more local modelobjects are found, a matching was made
                                and they are displayed in the selected view. <figure>
                                    <title>Step Eight to Eleven(TODO make image dynamic to
                                        with)</title>
                                    <mediaobject>
                                        <imageobject>
                                            <imagedata fileref="graphics/StepEightToEleven.png"
                                                align="center"/>
                                        </imageobject>
                                    </mediaobject>
                                </figure>
                            </para>
                        </listitem>
                    </orderedlist>
                </para>
            </sect3>
            <sect3>
                <title>Registry Function Summary</title>
                <para>
                    <itemizedlist>
                        <listitem>
                            <para>Manages the defined models.</para>
                        </listitem>
                        <listitem>
                            <para>Associates tools with models during their registration.</para>
                        </listitem>
                        <listitem>
                            <para>Contains the mapper entity which creates mappings between
                                modelobjects from different models. To calculate a mapping, the
                                mapper needs two inputs, the sourcelink and the destination-model.
                                The sourcelink is transported via the http-link, the
                                destination-model is manually chosen by the actor. The sourcelink is
                                transformed in a set of potential links in the
                                destination-model.</para>
                        </listitem>
                        <listitem>
                            <para>An user-interface, which reads a http-request containing the
                                sourcelink and enables the actor to choose the response view. This
                                user-interface may be realized via a http-servlet. Tasks of this
                                servlet are, to authenticate the user, to display all tools and
                                views installed at the actor´s client and to give feedback if a
                                potential link may be established. </para>
                        </listitem>
                        <listitem>
                            <para>Call tools and sends them the transformed links.</para>
                        </listitem>
                    </itemizedlist>
                </para>
            </sect3>
            <sect3>
                <title>Tool Function Summary</title>
                <para>
                    <itemizedlist>
                        <listitem>
                            <para>Registeres at startup and receives model. The received model
                                defines the structure of created and accepted
                                modelobject-links.</para>
                        </listitem>
                        <listitem>
                            <para>Must enable the user to extract a link to a selected
                                modelobject.</para>
                        </listitem>
                        <listitem>
                            <para>Must provide an interface to open one or more potential
                                modelobjects, after the user selected a view in the
                                registry-servlet. Must inform the actor about a failure during
                                linking.</para>
                        </listitem>
                    </itemizedlist>
                </para>
            </sect3>
            <sect3>
                <title>Failover Actions</title>
                <para>If one of the following situations occur, the user will be informed an the
                    linking process is stopped. Other fallback options are future matter.<itemizedlist>
                        <listitem>
                            <para>No match was found.</para>
                        </listitem>
                        <listitem>
                            <para>The user has not the rights too view the associated files of the
                                result links.</para>
                        </listitem>
                        <listitem>
                            <para>A match was found, but the user has not the needed files to view
                                it and it is not online available. </para>
                        </listitem>
                    </itemizedlist></para>
            </sect3>
        </sect2>
    </sect1>
    <sect1>
        <title>XLink with OPENENGSB</title>
        <anchor id="xlink_openengsb"/>
        <sect2>
            <title>Applying the conzept to OPENENGSB components</title>
            <para>To understand the following section, you have to be familiar with the OPENENGSB
                framework architecture and its contained components. If this is not the case, find
                the manual <ulink url="http://www.openengsb.org/index/documentation.html"
                    >here</ulink>. The most important chapter in this case would be Chapter
                concerning the <ulink
                    url="http://openengsb.org/manual/openengsb-framework-manual/v2.4.1/html-single/openengsb-framework-manual.html#user.architecture"
                    >Architecture of the OpenEngSB</ulink>. </para>
            <para>The registry component may be implemented as a context sensitive service (context
                sensitive since the mapping is only done for single projects). Its included
                user-interface will be implemented as http-servlet, which will be implementet ontop
                of a http-service.</para>
            <para>For our usecase some basic models will be defined, they will be most likely
                assigned to Tool Domains. When a client starts, its Tool Connectors register
                themselfes at the Service Bus. During this, every connector can announce if it wants
                to take part in linking. If this is the case, the connector gets a model assigned,
                this model is given to it by its Tool Domain. One Domain may have one or more models
                assigned but one Tool Connector will always have only one model assigned. This
                'assigned' of the model means that the connector (and the tool) get an instruction
                how to create a modelobject-identifier and what is the url of the registry
                http-servlet. In this way every tool can construct correct modelobject-links. </para>
            <para>The http-servlet url will be a standart url, the modelobject identifier other
                nessecary metadata will be transportet via get parameters.</para>
            <para><emphasis role="italic">standartlink für jede domäne mit parameter für entrypoint
                </emphasis>  </para>
            <para><emphasis role="italic">registrieren der connectoren am bus muss erweitert auf IP
                    und List&lt;views> Domäne hat je nach connectoren die angemeldet werden, mehrere
                    Modelle registriert </emphasis></para>
        </sect2>
    </sect1>
    <sect1>
        <title>Future matter</title>
        <para>creation of entity 'mapper' which does the transformations</para>
        <para>loading of central available data - matter of the tool</para>
        <para>fallback options for failovers mentioned above</para>
        <para>XLinking on one local client - matter of the tool (for example parsing the servlet
            site to save one step of work)</para>
        <para>What to do, if content of views is not covered by the associated identifier - matter
            of the tool ( tool has to determine how to handle this)</para>
    </sect1>
</article>
