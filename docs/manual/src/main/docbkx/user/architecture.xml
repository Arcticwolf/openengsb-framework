<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2010 OpenEngSB Division, Vienna University of Technology

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

<chapter xml:id="architecture" version="5.0" xmlns="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
  http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd
  http://www.w3.org/2001/XMLSchema-instance http://www.w3.org/2001/XMLSchema-instance.xsd">

  <title>Architecture of the OpenEngSB</title>

  <para>This chapter explains the architecture of the OpenEngSB in detail. TBW(Add explanation of graphic here)</para>

  <para>
    <mediaobject>
      <alt>Technical view of the OpenEngSB highlighting the most important concepts of the integration system.</alt>
      <imageobject>
        <imagedata fileref="graphics/extendedEngSB.png" format="png" width="450" align="center"/>
      </imageobject>
      <caption><para>Technical view of the OpenEngSB highlighting the most important concepts of the integration system</para></caption>
    </mediaobject>
  </para>

  <para>TBW(Short introduction into the different components which are going to be explained next)</para> 

  <section xml:id="architecture.concept.esb">
    <title>Enterprise Service Bus (ESB)</title>
    <para>One of the principal concepts for the OpenEngSB development is (if possible) 
    to use already existing and proven solutions rather than inventing new ones. In this manner the OpenEngSB is an 
    extension to the ESB concept described in section 3.1.5. Since the Java Business Integration (JBI, section 
    3.3.3) specification is outlined as the most promising approach for a Java integration solution, an 
    implementation has to be chosen. As a promising, actively developed and open source integration framework with 
    commercial support it has been decided to take Apache Servicemix to serve as the technical backbone for the 
    OpenEngSB project.</para>
  </section>
 
  <section xml:id="architecture.concept.infrastructure">
    <title>OpenEngSB Infrastructure</title>
    <para>Although the JBI specification delivers a reliable and solid technical 
    specification for an integration solution, it does not cover all use cases. The OpenEngSB infrastructure 
    summarizes all extensions to the JBI messaging protocol in section 7.2.</para>
  </section>

  <section xml:id="architecture.concept.components">
    <title>OpenEngSB Components</title>
    <para>The concept of Core Components contains all additional developed components providing 
    services not available by external tools or the JBI integration infrastructure. These components add essential 
    functionality to the OpenEngSB like a registry (section 7.3.1) or workï¬‚ow administration (section 7.3.2) and 
    therefore provide a rich framework for modeling (software+) engineering environments.</para>
  </section>

  <section xml:id="architecture.concept.tooldomains">
    <title>OpenEngSB Tool Domains</title>
    <para>Although each tool provider gives a personal touch to its product their design is driven by a specific 
    purpose. For example, there are many different issue tracker available, each having its own advantages and 
    disadvantages, but all of them can create issues, assign and delete them. Tool Domains are based on this idea 
    and distill the common functionality for such a group of tools into one Tool Domain interface (and component).
    Tool domains could be compared best to the concept of abstract classes in in object orientated programming 
    languages. Similar to these, they can contain code, workflows, additional logic and data, but they are useless 
    without a concrete implementation. This and further concepts are explained in greater detail in section 7.4. 
    Together with the ESB, the OpenEngSB infrastructure and the core components the tool domains finally result 
    in the OpenEngSB.</para>
  </section>

  <section xml:id="architecture.concept.bridge">
    <title>Bridge</title>
    <para>JBI does not allow components that are not deployed in the JBI infrastructure to directly interact with 
    services provided over the Normalized Message Router (NMR). This means that neither tools deployed to the 
    OpenEngSB can directly access external components nor the other way round. To overcome this challenge the 
    concept of the bridge is introduced and explained in section 7.4.</para>
  </section>

  <section xml:id="architecture.concept.clienttools">
    <title>Client Tools (Service Consumer)</title>
    <para>Client Tools in the OpenEngSB concept are tools which do not provide any 
    services, but consume services provided by Tool Domains and Core Components instead. A classical example from 
    software engineering for a client tool is the Integrated Development Environment (IDE). Developer prefer to 
    have the entire development environment, reaching from the tickets for a project to its build results, at
    hand. On the other hand they do not need to provide any services. The detailed technical point of view on 
    Client Tools is given in section 7.5.</para>
  </section>

  <section xml:id="architecture.concept.domaintools">
    <title>Domain- and Client Tool Connectors</title>
    <para>Tool Connectors wrap up tools as Domain Tool Connectors to provide their services to accommodate the 
    relevant Tool Domain with the expected interface. As Client Tool Connectors they provide a Client Tool with 
    an access to the OpenEngSB services. Again, Domain- and Client Tool Connectors are mostly mixed up but 
    separated because of their technical differences (see section 7.5). Additionally it is worth mentioning that 
    tools can be integrated with more than one connector. This allows one tool to act in many different domains. 
    Maven 2 is an example for such multi-purpose tools, relevant for build, as well as test and deploy of Java 
    projects.</para>
  </section>

</chapter>

