<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2010 OpenEngSB Division, Vienna University of Technology

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

<chapter xml:id="developer.plugins" version="5.0" xmlns="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
  http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd
  http://www.w3.org/2001/XMLSchema-instance http://www.w3.org/2001/XMLSchema-instance.xsd">

  <title>External Domains and Connectors</title>

  <para>Since tools are mostly neither developed for the OpenEngSB nor written in any way that they can be directly
  deployed in the OpenEngSB environment a way is required to connect via different programming languages than Java
  and from multible protocols. This section covers the examples in different languages and protocols, how such
  a thing can be achived.</para>

  <section xml:id="developer.plugins.proxy">
    <title>Proxying</title>
    <para>The proxy mechanism allows for any method call to be intercepted.</para>
    <section>
      <title>Proxying internal Connector calls</title>
      <para>The proxy mechanism allows to create proxies for any domain. To create a proxy you have to provide a
        port id, destination and service id to call on the remote service. A Port encapsulates the protocol that
        is used to call another service. There are an OutgoingPort and IncomingPort interface for respective purposes.
        The port id is used to load the Port via OSGI. To include a Port in OPENENGSB it just has to be exported via OSGI.
        The destination is a string that has to be correctly interpreted by the port to call the remote server.
        The service id is added as metadata do identify the service that shold get called on the remote server. It may not
        be needed for certain implementations.</para>
      <para>The proxy calls the CallRouter which redirects the methodcall to the respective Port. Security is implemented
      in this layer.</para>
    </section>
  </section>

  <section xml:id="developer.ports.jms">
    <title>Using JMS proxying</title>
    <para>The current JMS Connector allows for internal method calls being redirected via JMS as well as internal
    services being called.</para>
    <section>
      <title>Proxying internal Connector calls</title>
      <para>Whenever now a method is sent through the JMS Port the call is marshalled and sent via JMS to a queue named "receive"". 
        The marshalling is done via JSON. The mapping has the parameters methodName, args, classes, metadata and potentially answer 
        and callId. methodName gives the name of the method to call. Args are the serialised parameters of the method. classes are 
        the types of the arguments. This way it is easy to unmarshall the args into the appropriate classes. metadata is a simple Map
        which stores key value pairs. answer can simply be yes or no and denotes if the methodcall wants an answer to the call. callId
        gives the return queue the caller will listen to for an answer.
      </para>
      <para>An answer can have the type, arg, className and metaData properties. type can be Object, Exception or Void. arg is the serialised
        form of the return argument. className is the runtime class of the arg for deserialisation. metadata is a simple key value store.
      </para>
    </section>
    <section>
      <title>Calling internal Services</title>
      <para>To call an internal Service send a methodcall as described before to the "receive" queue on the on the server you want to call.
       The service works exactly as defined before.</para>
      <para>By default a JMS Broker is started on port 6549.</para>
    </section>
    <section>
      <title>Examples</title>
      <section>
        <title>Connect With Python</title>
        <para>To test the OPENENGSB JMS implementation with Python please follow the
          <link xlink:href="${github}/docs/examples/connectors/python/PythonClient.txt">instructions</link>
        </para>
        <para>The example can be downloaded <link xlink:href="${repos.example}-python-connector.zip">here</link></para>
      </section>
      <section xml:id="developer.plugins.csharp">
        <title>Connect With CSharp</title>
        <para>The CSharp connector is written on basis of the Apache ActiveMQ NMS connector and with help of the Spring
        NmsTemplate. The code is checked into the repository and could be found in <literal>nonjava/csharp</literal>.
        There an EngSB.sln file. This project file has been developed with SharpDevelop 3, but is also tested with
        VisualStudio 2008 CSharp Express Edition with the .Net Framework 3.5.</para>
        <para>The example can be downloaded <link xlink:href="${repos.example}-csharp-connector.zip">here</link></para>
      </section>
      <section xml:id="developer.plugins.perl">
        <title>Connect With Perl</title>
        <para>As shown in this example you can connect to the OpenEngSB in a similar way as with Python or CSharp.</para>
        <para>The example can be downloaded <link xlink:href="${repos.example}-perl-connector.zip">here</link></para>
      </section>
    </section>
  </section>
</chapter>

