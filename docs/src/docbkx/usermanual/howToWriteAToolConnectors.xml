<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--

   Copyright 2010 OpenEngSB Division, Vienna University of Technology

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

-->
<chapter id="writingDomain">
  <title>How To write a Tool Connector</title>

  <section>
    <title id="general">General</title>

    <para>This documentation should show newcomers how to use Apache ServiceMix components for your own issues.
      Therefore, I also show some of my own problems by the implementation of the mvn build connector.</para>

    <section>
      <title id="apache.servicemix.components">Apache ServiceMix Components</title>

      <para>
        Before we start the implementation you should be familiar with the Apache ServiceMix components. You should know
        what is a service unit, a service assembly, a service engine and a binding component. Of course there is an
        official documentation, but it is very hard to understand the full concept in a small tutorial. A good
        overview, that I used, was the following site:
        <ulink url="http://servicemix.apache.org/users-guide.html">http://servicemix.apache.org/users-guide.html</ulink>
        . For a deeper understanding I focused on code reading from the ServiceMix Source Repository.
      </para>

      <para>
        <itemizedlist>
          <listitem>
            <para>http://svn.apache.org/repos/asf/servicemix</para>
          </listitem>

          <listitem>
            <para>http://svn.apache.org/repos/asf/servicemix/smx/trunk</para>
          </listitem>
        </itemizedlist>
      </para>

      <para>Attention, I summarize some typical servicemix documentation in my own words. This is not a replacement of
        the user-guide mentioned above.
      </para>
    </section>

    <section>
      <title id="jbi">Java Business Integration</title>

      <para>
        Another important documentation for understanding the mapping for the integration Test is the standard of JBI(
        <ulink url="http://jcp.org/en/jsr/detail?id=208">http://jcp.org/en/jsr/detail?id=208 </ulink>
        ). If you open the link choose the latest version of JBI and download the specification. Of course, it is a 240
        page long document, but the first 120 pages explain how the mapping works. Especially chapter 5 - Normalized
        Message Router - shows the technology with good examples.
      </para>
    </section>

    <section>
      <title id="writeJavadoc1">Write JavaDoc</title>

      <para>Its very important to write javadoc for a quick code review.</para>
    </section>
  </section>

  <section>
    <title id="preparation">Preparation</title>

    <para>
      In a software engineering team its typical to use a special kind of development. In our team you should use
      test driven development for your tasks.
    </para>

    <para>
      To manage the files for our development you should be familiar with GIT. You can find a short introduction to the workflow for new tools on 
      page(
      <ulink url="???">infrastructure</ulink>
      ). For a deeper understanding search the web.
    </para>

    <section>
      <title id="cygwin">Cygwin</title>

      <para>
        If you use windows it is necessary to install cygwin to manage the git commands like push and pull. When you install cygwin you have to look for the openssh for authentification and the git libraries for
        working. For working with the cmd, set a system variable and the path.
      </para>
    </section>

    <section>
      <title id="rootDirectory">Root Directory</title>

      <para>
        In the root directory there are some helper files like shell scripts to support typical actions. Also the
        gitignore file is located in that directory for excluding unwanted files or direcotries.
      </para>
    </section>

    <section>
      <title id="creating.servicemix.element">Creating ServiceMix Element</title>

      <para>
        For creating a servicemix element you can easily use the archetype command from maven by using the the
        servicemix archetype ids. If you want to add a new component to Engsb, you should regard the standard groupId
        and the pattern of the aritfactId.
      </para>

      <para>General example:</para>

      <para>
        <programlisting format="linespecific" language="java"><![CDATA[mvn archetype:create
    -DarchetypeGroupId=org.apache.servicemix.tooling
    -DarchetypeArtifactId=servicemix-binding-component
    -DarchetypeVersion=3.2.1
    -DgroupId=at.ac.tuwien.ifs.engsb
    -DartifactId=engsb-mvn-build]]></programlisting>
        In the root directory of the project you will find a file called createProject.sh. This is a shell
        script for creating a servicemix element with parameters.
      </para>

      <para>
        <programlisting format="linespecific"><![CDATA[mvn archetype:create
    -DarchetypeGroupId=org.apache.servicemix.tooling
    -DarchetypeArtifactId=$1
    -DgroupId=org.openengsb
    -DartifactId=$2]]></programlisting>
        With this script a command would finally look like:
      </para>

      <programlisting format="linespecific"><![CDATA[./createProject.sh servicemix-binding-component engsb-component]]>
      </programlisting>

      <para>
        This would result in a engsb-component project of the type servicemix-binding-component. Since windows user
        have to install cygwin this command will also work on their machines. *nix users will not experience any
        problems with this command.
      </para>
    </section>

    <section>
      <title id="modify.pom.xml">Modify pom.xml</title>

      <para>
        The created pom.xml does not have the right dependency versions in most cases. For managing the dependencies and
        the embedded modules you should use the parent pom that you can find in the head directory. If you need
        additional dependencies for your tasks, add the dependency in your branch in the parent pom. Also the whole
        build has to be configured in the parent pom, for example the compiler plugin to set the java version.
      </para>

      <para>
        You should also use the name tag to describe the component and to identify the component in the command line
        during the
        build process.
      </para>

      <para>
        In a nutshell, you use the parent pom, name new components with a descriptive name, add only required
        dependencies, plugins, etc. in the parent pom. The version management is also handled in the parent pom.
      </para>

      <para>
        There are a lot of implemented features where the typical pom for a domain is shown.
      </para>

      <section>
        <title id="use.junit.4.4">JUnit 4.4</title>

        <para>
          At the moment (18.09.2009) there are some problems with spring and junit 4.5 or higher. Maybe the problems
          disappear in a few days, weeks or months.
        </para>

        <para>
          <emphasis role="bold" wordsize="16">Use JUnit 4.4 for testing</emphasis>
        </para>
      </section>
    </section>

    <section>
      <title id="plugins">Plugins</title>

      <para>
        When you look at the pom.xml, you will find these plugins. The type describes what servicemix component
        will be produced during the build process and the component tag refers to the class. Also the namespace plays a
        important role, if you don't use the same in your integration test, it won't react to your commands.
      </para>

      <para>
        <programlisting format="linespecific" language="xml"><![CDATA[<plugin>
  <groupId>org.apache.servicemix.tooling</groupId>
  <artifactId>jbi-maven-plugin</artifactId>
  <extensions>true</extensions>
  <configuration>
    <type>binding-component</type>
    <component>at.ac.tuwien.ifs.engsb.BuildComponent</component>
  </configuration>
</plugin>
<plugin>
  <groupId>org.apache.xbean</groupId>
  <artifactId>maven-xbean-plugin</artifactId>
  <executions>
    <execution>
      <configuration>
        <namespace>http://at.ac.tuwien.ifs.engsb</namespace>
      </configuration>
      <goals>
        <goal>mapping</goal>
      </goals>
    </execution>
  </executions>
</plugin>]]></programlisting>
      </para>
    </section>

    <section>
      <title id="components.endpoints">Components and Endpoints</title>

      <para>
        Components do not interact with each other directly. Instead JBI functions as an intermediary to route
        messages from component
        to component. This separation of the participants in an exchange is key to decoupling
        service providers from
        consumers, which is highly desirable in service-oriented architectures generally, and in
        integration solutions
        in particular.
      </para>

      <para>
        In this WSDL-based, service-oriented model, JBI plug-in components are responsible for providing and consuming
        services. By providing a service, a component is making available a function or functions that can be consumed
        by other components (or even itself). Components can query JBI for the for the WSDL describing available
        services. JBI engines and bindings function as service consumers, providers, or both. A service provider makes a
        WSDL-described service available through an
        <emphasis role="bold">endpoint</emphasis>. A consumer makes use of services by initiating message exchanges 
        that invoke particular operations.
      </para>

      <para>
        WSDL 2.0 Predefined Extensions [WSDL 2.0 Extensions] defines a message exchange pattern (MEP) as “the
        sequence and
        cardinality of abstract messages listed in an operation.” JBI uses this concept to define
        interactions between
        two nodes: the consumer node, and the provider node. The pattern is defined in terms of
        message type (normal or
        fault), and message direction.
      </para>

      <para>
        In the MEP are endpoints defined for the communication. You can compare this concept with another like RMI or
        simple sockets. You have someone who offers services and someone who wants to use them. For the activation you
        have to send a command and parameter. For the Normalized Message we use the payload as standard, so you have to
        generate an xml message for the communication between components for your objects and values, that you want to
        transfer. On the other site you can read the xml message and set the wanted parameter. More information is
        shown in the source code. The different message patterns (In-out, In-only, ...) can be found in the standard of JBI
        or in the ServiceMix user's guide:
        <ulink url="http://servicemix.apache.org/5-jbi.html#5">http://servicemix.apache.org/5-jbi.html#5</ulink>
        .
      </para>

      <para>
        Endpoints refer to a particular address, accessible by a particular protocol, used to access a particular
        service.
      </para>

      <para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">External</emphasis>
              - Endpoints outside of the JBI environment:
            </para>

            <para>
              <itemizedlist>
                <listitem>
                  <para>
                    Endpoints exposed by external service providers.
                  </para>
                </listitem>
              </itemizedlist>
              <itemizedlist>
                <listitem>
                  <para>
                    External endpoints exposed by binding components, for the use of external service
                    consumers.
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
        </itemizedlist>
      </para>

      <para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Internal</emphasis>
              - Endpoints exposed by service providers within the JBI environment. These are accessed using the NMR
              APIs.
            </para>
          </listitem>
        </itemizedlist>
      </para>

      <para>
        If you create the project with the command mentioned above, you will find some predefined classes. At first
        the following annotation sets the name of the component and shows the default binding. The component is a default
        JBI Component with the base lifecycle. You could implement your own component and override methods from
        ServiceMix if your tasks require it. In most cases you can use the default configuration of the component.
      </para>

      <para>
        <programlisting format="linespecific" language="java"><![CDATA[  /**
   * @org.apache.xbean.XBean element="buildComponent"
   */
   public class BuildComponent extends DefaultComponent]]></programlisting>
      </para>
    </section>

    <section>
      <title id="xbean">XBean</title>

      <para>
        Look at the target/xbean directory for deeper information. For example you wil find a XSD File that
        describes what the WSDL will look like after building.
      </para>
    </section>

    <section>
      <title id="writeJavadoc2">Write JavaDoc</title>

      <para>
        It is very important to write javadoc for a quick code review.
       </para>
    </section>
  </section>

  <section>
    <title id="writing.tests">Writing Tests</title>

    <para>
      It is helpful to write your unit tests at first. This way you can be sure that your code does what you want before
      you use ServiceMix.
    </para>

    <section>
      <title id="unit.tests">Unit Tests</title>

      <para>
        Write your test cases at first and after your first step of your implementation, think about refactoring
        before you go
        further. Maybe you could use helper methods or classes for your test cases or you can also utilize
        other
        patterns.
        </para>
    </section>

    <section>
      <title id="integration.tests">Integration Test</title>

      <section>
        <title id="mapping">Mapping</title>

        <para>
          In ServiceMix you use a standard component in the xbean.xml, where you define the component with its
          endpoints. The
          endpoints deliver parameters that initialize and activate the service from the component. For
          example the
          quartz component of servicemix has a repeat intervall for starting a target service.
          </para>

        <para>
          The configruation of the xbean is surrounded by a beans tag like in basic examples of spring. And this is not
          a hazard. The difference between xbean and plain spring syntax is shown on the page:
          <ulink url="http://servicemix.apache.org/xbean-syntax.html">http://servicemix.apache.org/xbean-syntax.html</ulink>
        </para>

        <para>
          A definition of a bean for your own objects (creating and setting the parameter of that object with a
          bean) to
          initialize your endpoints can easiliy set and refer to a endpoint of your choice.
        </para>

        <para>
          <programlisting format="linespecific" language="xml"><![CDATA[<bean class="at.ac.tuwien.ifs.engsb.utils.ProjectConfiguration"
  id="projectConfigBean">
  <property name="buildfile">
    <value>file:target/test-classes/build-test-dep/pom.xml</value>
  </property>
  <property name="goals">
    <list>
      <value>clean</value>
      <value>install</value>
    </list>
  </property>
  <property name="baseDirectory">
    <value>file:target/test-classes/build-test-dep</value>
  </property>
</bean>]]></programlisting>
          If you understand the bean invocation, you will see that the other elements in the xbean.xml are also beans
          and initialize the endpoint, the component and create an initialized JBI Component, which is embedded in
          ServiceMix. To check this, look at the super classes of the DefaultComponent. You will find a class named
          ServiceMixComponent and a short description in JavaDoc.
        </para>

        <para>
          Now the endpoints are initialized for communication. As we mentioned above the communication between the
          endpoints and
          the Normalized Message Router has to be in xml and is part of the WSDL service-oriented model.
          Now a message
          can be sent to activate a service, for instance build the project with the baseDirectory xy.
        </para>
      </section>

      <section>
        <title id="spring.xml">spring.xml</title>

        <para>
          A small example of a service unit simulation for the integration test.
        </para>

        <para>
          <programlisting format="linespecific" id="integration.test.example" language="xml"><![CDATA[<beans xmlns:sm="http://servicemix.apache.org/config/1.0"
 xmlns:engsb="http://at.ac.tuwien.ifs.engsb" xmlns:test="urn:buildtest">

 <sm:container id="jbi" embedded="true" createMBeanServer="false">

  <sm:activationSpecs>
    <sm:activationSpec> 
      <sm:component>
        <engsb:buildComponent>
          <engsb:endpoints>
            <engsb:buildProvider service="test:build-test" endpoint="endpoint" id="firstEndpoint">

              <engsb:projectConfiguration>
                <ref bean="projectConfigBean" />
              </engsb:projectConfiguration>
              <engsb:options>
                <ref bean="testOptions" />
              </engsb:options>

            </engsb:buildProvider>
          </engsb:endpoints>
        </engsb:buildComponent>
      </sm:component>
    </sm:activationSpec>
  </sm:activationSpecs>
</sm:container>]]></programlisting>
        </para>
      </section>

      <section>
        <title>Integration Test Example</title>

        <para>
          For Writing Test use annotations for setting the context, resources, test, etc. A look in the class
          SpringTestSupport can be helpful to understand, why the client has the parameter jbi. Its just a bean from the
          spring-test.xml.
          <programlisting format="linespecific" language="java"><![CDATA[@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = {"/spring-test.xml"})
public class MavenIntegrationTest extends SpringTestSupport
    
   /**
    * The constants needed for the tests
    */
    @Resource
    private Constants CONSTANTS;

    @Before
    @Override
    protected void setUp() throws Exception {
        super.setUp();
    }

    @After
    @Override
    public void tearDown () throws Exception {
        super.tearDown();
    }

    private InOut createInOutMessage(DefaultServiceMixClient client, String namespace,
            String service, String message) throws MessagingException {
        InOut inOut = client.createInOutExchange();
        inOut.setService(new QName(namespace, service));
        inOut.getInMessage().setContent(new StringSource(message));

        return inOut;
    }

    @Test
    public void buildShouldBeSuccessful() throws Exception {
        DefaultServiceMixClient client = new DefaultServiceMixClient(this.jbi);

        InOut inOut = createInOutMessage(client, "urn:buildtest", "build-test", "<execute/>");

        ClassPathResource res = new ClassPathResource(CONSTANTS.TEST_PROJECT_POM);
        File testProjectPOM = res.getFile();

        ProjectConfiguration projectConfig = (ProjectConfiguration) getBean("projectConfigBean");
        projectConfig.setBaseDirectory(testProjectPOM.getParentFile());
        projectConfig.setBuildfile(testProjectPOM);
        projectConfig.setGoals(new ArrayList<String>(Arrays.asList(new String[] { "clean", "package" })));

        Source source = ProjectConfigurationSerializer
                .serialize(inOut.getInMessage().getContent(), projectConfig);
        inOut.getInMessage().setContent(source);
        client.sendSync(inOut);

        assertExchangeWorked(inOut);

        BuildResult result = BuildResultSerializer.deserialize(inOut.getOutMessage());
        assertEquals(BuildResult.SUCCESS, result.getBuildOutput());
    }]]></programlisting>
        </para>
      </section>
    </section>
  </section>

  <section>
    <title id="writeJavadoc3">Write JavaDoc</title>

    <para>
      Its very important to write javadoc for a quick code review.
    </para>
  </section>
</chapter>
