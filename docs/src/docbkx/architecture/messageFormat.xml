<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--

   Copyright 2010 OpenEngSB Division, Vienna University of Technology

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

-->
<chapter id="messageFormat">
  <title>Message Format</title>
  <para>
    In this chapter the common message format of all JBI messages shall be explained in detail. The message
    properties and message exchange patterns that are used in the OpenEngSB will be explained as well as the payload
    structure both for service-call messages and event messages.
  </para>
  
  <section id="messageFormat.properties">
    <title>Message Properties</title>
    <para>
      Every JBI Message sent in the OpenEngSB uses these four message properties of type String.
      <orderedlist>
        <listitem>
          contextId - [required] - defines the project context, used e.g. by the context configuration component
          to decide which project configuration shall be used.
        </listitem>
        <listitem>
          correlationId - [required] - the first message that is sent into the bus defines the correlation Id -
          all messages which are sent in response or triggered by the initial message inherit the correlationId. This can
          be used by logging, reporting or profiling components to document the message flow in the OpenEngSB.
        </listitem>
        <listitem>
          workflowId - [optional] - If the message is part of the execution of a workflow this id shall be set
          to the id of the workflow defined by drools flow.
        </listitem>
        <listitem>
          workflowInstanceId - [optional] - If the workflowId is set, also the workflowInstanceId shall be set
          to uniquely identify the currently executing instance of the workflow. No pair of instances of any workflow
          should have the same workflowInstanceId.
        </listitem>
      </orderedlist>
    </para>
  </section>
  
  <section id="messageFormat.mep">
    <title>Message Exchange Patterns and the Operation Field</title>
    <para>
      The message exchange pattern used by the OpenEngSB is different for service-call messages and event messages. While
      for service-call messages the in-out pattern is used and the return value will be sent back in the out message, for event
      messages the in-only message exchange pattern is used. If error feedback is necessary for the event producing
      component the robust-in-only message exchange pattern can be used.
    </para>
    <para>
      JBI messages can also define a "operation" field for messages. This field has to be set to "methodcall" for
      service calls and to "event" for event messages.
    </para>
  </section>
  
  <section id="messageFormat.payload">
    <title>Payload Structure</title>
    <para>
      The payload of the messages is defined by the following XML schema.
    </para>
    <programlisting language="xml">
      <![CDATA[ 
<?xml version="1.0"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:oes="http://openengsb.org/serialization/1.0/">

  <xs:complexType name="XMLPrimitive">
    <xs:choice>
      <xs:element name="string" type="xs:string" />
      <xs:element name="float" type="xs:float" />
      <xs:element name="double" type="xs:double" />
      <xs:element name="boolean" type="xs:boolean" />
      <xs:element name="int" type="xs:int" />
      <xs:element name="long" type="xs:long" />
      <xs:element name="short" type="xs:short" />
      <xs:element name="byte" type="xs:byte" />
      <xs:element name="base64Binary" type="xs:base64Binary" />
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="XMLMapable">
    <xs:sequence>
      <xs:choice>
        <xs:element name="null" type="xs:string" />
        <xs:element name="reference" type="XMLReference" />
        <xs:element name="primitive" type="XMLPrimitive" />
        <xs:element name="bean" type="XMLBean" />
        <xs:element name="list" type="XMLMapableList" />
        <xs:element name="event" type="XMLEvent" />
        <xs:element name="map" type="XMLMapEntryList" />
        <xs:element name="context" type="XMLContext" />
      </xs:choice>
      <xs:element name="id" type="xs:string" nillable="true" />    
    </xs:sequence>
    <xs:attribute name="domainConcept" type="xs:string" />
  </xs:complexType>

  <xs:complexType name="XMLMapableList">
    <xs:sequence>
      <xs:element name="mapable" type="XMLMapable" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="XMLMapEntryList">
    <xs:sequence>
      <xs:element name="mapEntry" type="XMLMapEntry" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="XMLEvent">
    <xs:sequence>
      <xs:element name="className" type="xs:string" />
      <xs:element name="domain" type="xs:string" />
      <xs:element name="name" type="xs:string" />
      <xs:element name="toolConnector" type="xs:string" nillable="true" />
      <xs:element name="elements" type="XMLMapEntry" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>

  <xs:element name="XMLEvent" type="XMLEvent" />

  <xs:complexType name="XMLBean">
    <xs:sequence>
      <xs:element name="className" type="xs:string" />
      <xs:element name="fields" type="XMLField" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="XMLField">
    <xs:sequence>
      <xs:element name="fieldName" type="xs:string" />
      <xs:element name="value" type="XMLMapable"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="XMLMapEntry">
    <xs:sequence>
      <xs:element name="key" type="XMLMapable" />
      <xs:element name="value" type="XMLMapable" />
    </xs:sequence>
  </xs:complexType>

  <xs:element name="XMLReturnValue">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="value" type="XMLTypedValue" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="XMLMethodCall">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="methodName" type="xs:string" />
        <xs:element name="args" type="XMLTypedValue" maxOccurs="unbounded" />
      </xs:sequence>
      <xs:attribute name="domainConcept" type="xs:string" />
    </xs:complexType>
  </xs:element>
  
  <xs:complexType  name="XMLTypedValue">
    <xs:sequence>
      <xs:element name="type" type="xs:string" />
      <xs:element name="value" type="XMLMapable" />
    </xs:sequence>
  </xs:complexType>

  <xs:complexType  name="XMLContextEntry">
    <xs:sequence>
      <xs:element name="key" type="xs:string" />
      <xs:element name="value" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  
  <xs:complexType name="XMLContext">
    <xs:sequence>
      <xs:element name="entries" type="XMLContextEntry" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>
  
  <xs:element name="XMLContext" type="XMLContext" />

  <xs:complexType name="XMLReference">
    <xs:sequence>
      <xs:element name="id" type="xs:string" />
    </xs:sequence>
  </xs:complexType>

</xs:schema>
      ]]>
    </programlisting>
  </section>
  
  <section id="messageFormat.service">
    <title>Service-Call Message Format</title>
    <para>
      The following two examples show the structure of a service call and the return message.
    </para>
      <programlisting language="xml">
        <![CDATA[ 
<?xml version="1.0" encoding="UTF-8"?>
<XMLMethodCall>
  <methodName>myMethod</methodName>
  <args>
    <type>java.lang.String</type>
    <value>
      <primitive>
        <string>foo</string>
      </primitive>
      <id>0</id>
    </value>
  </args>
</XMLMethodCall>
        ]]>
      </programlisting>
      <programlisting language="xml">
        <![CDATA[ 
<?xml version="1.0" encoding="UTF-8"?>
<XMLReturnValue>
  <value>
    <type>org.openengsb.SomeBean</type>
    <value>
      <bean>
        <className>org.openengsb.SomeBean</className>
        <fields>
          <fieldName>myFieldA</fieldName>
          <value>
            <primitive>
              <string>foo</string>
            </primitive>
            <id>1</id>
          </value>
        </fields>
        <fields>
          <fieldName>myFieldB</fieldName>
          <value>
            <primitive>
              <int>42</int>
            </primitive>
            <id>2</id>
          </value>
        </fields>
        <fields>
          <fieldName>myFieldC</fieldName>
          <value>
            <null>null</null>
          </value>
        </fields>
      </bean>
      <id>0</id>
    </value>
  </value>
</XMLReturnValue>
        ]]>
      </programlisting>
  </section>
  
  <section id="messageFormat.event">
    <title>Event Message Format</title>
    <para>
      The following example shows the structure of an event message.
    </para>
      <programlisting language="xml">
        <![CDATA[ 
<?xml version="1.0" encoding="UTF-8"?>
<XMLEvent>
  <className>org.openengsb.core.model.Event</className>
  <domain>myDomain</domain>
  <name>myEventName</name>
  <elements>
    <key>
      <primitive>
        <string>buz</string>
      </primitive>
      <id>0</id>
    </key>
    <value>
      <bean>
        <className>org.openengsb.SomeBean</className>
        <fields>
          <fieldName>a</fieldName>
          <value>
            <null>null</null>
          </value>
        </fields>
        <fields>
          <fieldName>b</fieldName>
          <value>
            <null>null</null>
          </value>
        </fields>
      </bean>
      <id>1</id>
    </value>
  </elements>
  <elements>
    <key>
      <primitive>
        <string>foo</string>
      </primitive>
      <id>2</id>
    </key>
    <value>
      <primitive>
        <string>42</string>
      </primitive>
      <id>3</id>
    </value>
  </elements>
</XMLEvent>
        ]]>
      </programlisting>
  </section>
</chapter>
