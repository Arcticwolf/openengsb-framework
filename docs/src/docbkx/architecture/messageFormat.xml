<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--

   Copyright 2010 OpenEngSB Division, Vienna University of Technology

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

-->
<chapter id="messageFormat">
  <title>Message Format</title>
  <para>
    In this chapter the common message format of all JBI messages shall be explained in detail. The message
    properties and message exchange patters that are used in the OpenEngSB will be explained as well as the payload
    structure both for service-call messages and event messages.
  </para>
  
  <section id="messageFormat.properties">
    <title>Message Properties</title>
    <para>
      Every JBI Message sent in the OpenEngSB uses these four message properties of type String.
      <orderedlist>
        <listitem>
          contextId - [required] - defines the project context, used e.g. by the context configuration component
          to decide which project configuration shall be used.
        </listitem>
        <listitem>
          correlationId - [required] - the first message that is sent into the bus defines the correlation Id -
          all messages which are sent in response or triggered by the initial message inherit the correlationId. This can
          be used by logging, reporting or profiling components to document the message flow in the OpenEngSB.
        </listitem>
        <listitem>
          workflowId - [optional] - If the message is part of the execution of a workflow this id shall be set
          to the id of the workflow defined by drools flow.
        </listitem>
        <listitem>
          workflowInstanceId - [optional] - If the workflowId is set, also the workflowInstanceId shall be set
          to uniquely identify the currently executing instance of the workflow. No pair of instances of any workflow
          should have the same workflowInstanceId.
        </listitem>
      </orderedlist>
    </para>
  </section>
  
  <section id="messageFormat.mep">
    <title>Message Exchange Patterns and the Operation Field</title>
    <para>
      Using service-call messages and event messages the message exchange pattern used by the OpenEngSB is different. While
      for service messages the in-out pattern is used and the return value will be sent back in the out message for event
      messages the in-only message exchange pattern is used. If error feedback is necessary for the event producing
      component use the robust-in-only message exchange pattern.
    </para>
    <para>
      JBI messages can also define a "operation" field for messages. This field has to be set to "methodcall" for
      service calls and to "event" for event messages.
    </para>
  </section>
  
  <section id="messageFormat.payload">
    <title>Payload Structure</title>
    <para>
      There are two types of elements out of which all messages are composed.
      <orderedlist>
        <listitem>TextSegment - contains simple textual content.</listitem>
        <listitem>ListSegment - contains a list of segments.</listitem>
      </orderedlist>
      Both have three parameters, which have to be set (although empty String content is allowed).
      <orderedlist>
        <listitem>name - The name of the segment.</listitem>
        <listitem>format - The format of the content.</listitem>
        <listitem>domainConcept - used by the EKB component of the OpenEngSB.</listitem>
      </orderedlist>
    </para>
    <para>
      The following list contains the different types of elements that are supported in OpenEngSB messages.
      <orderedlist>
        <listitem>
          Null Values - Null values are supported for all types of values but primitive types.
          <programlisting language="xml">
            <![CDATA[ 
<!-- Null type as field of a bean -->
<list name="field" format="" domainConcept="">
  <text name="name" format="" domainConcept="">fieldName</text>
  <text name="type" format="" domainConcept="">java.lang.String</text>
  <text name="null" format="" domainConcept=""></text>
</list>

<!-- Null type as argument of a method call -->
<list name="argument" format="" domainConcept="">
  <text name="name" format="" domainConcept="">arg0</text>
  <text name="type" format="" domainConcept="">org.openengsb.SomeBean</text>
  <text name="null" format="" domainConcept=""></text>
</list>

<!-- Null type as element of an event -->
<list name="element" format="" domainConcept="">
  <text name="name" format="" domainConcept="">elementName</text>
  <text name="type" format="" domainConcept="">java.lang.Integer</text>
  <text name="null" format="" domainConcept=""></text>
</list>
            ]]>
          </programlisting>
        </listitem>
        <listitem>
          Primitive Types - All primitive types of Java are supported as well as their Object types. So "int" is supported as
          well as "java.lang.Integer".
          <programlisting language="xml">
            <![CDATA[ 
<!-- Primitive type as field of a bean -->
<list name="field" format="" domainConcept="">
  <text name="name" format="" domainConcept="">fieldName</text>
  <text name="type" format="" domainConcept="">java.lang.String</text>
  <text name="value" format="" domainConcept="">42</text>
</list>

<!-- Primitive type as argument of a method call -->
<list name="argument" format="" domainConcept="">
  <text name="name" format="" domainConcept="">arg0</text>
  <text name="type" format="" domainConcept="">int</text>
  <text name="value" format="" domainConcept="">42</text>
</list>

<!-- Primitive type as element of an event -->
<list name="element" format="" domainConcept="">
  <text name="name" format="" domainConcept="">elementName</text>
  <text name="type" format="" domainConcept="">java.lang.Integer</text>
  <text name="value" format="" domainConcept="">42</text>
</list>
            ]]>
          </programlisting>
        </listitem>
        <listitem>
          Beans - Java Beans can also be used. Beans have to have a no-arg constructor (which can be private). The fields have
          to be writable to be set by the framework. Getters and setters are not necessary.
          <programlisting language="xml">
            <![CDATA[ 
<!-- Bean type as field of a bean -->
<list name="field" format="" domainConcept="">
  <text name="name" format="" domainConcept="">fieldName</text>
  <text name="type" format="" domainConcept="">org.openengsb.SomeBean</text>
  <list name="field" format="" domainConcept="">
    <text name="name" format="" domainConcept="">fieldNameA</text>
    <text name="type" format="" domainConcept="">java.lang.String</text>
  <text name="value" format="" domainConcept="">42</text>
  </list>
  <list name="field" format="" domainConcept="">
    <text name="name" format="" domainConcept="">fieldNameB</text>
    <text name="type" format="" domainConcept="">int</text>
    <text name="value" format="" domainConcept="">42</text>
  </list>
</list>

<!-- Bean type as argument of a method call -->
<list name="argument" format="" domainConcept="">
  <text name="name" format="" domainConcept="">arg0</text>
  <text name="type" format="" domainConcept="">org.openengsb.SomeBean</text>
  <list name="field" format="" domainConcept="">
    <text name="name" format="" domainConcept="">fieldNameA</text>
    <text name="type" format="" domainConcept="">java.lang.String</text>
  <text name="value" format="" domainConcept="">42</text>
  </list>
  <list name="field" format="" domainConcept="">
    <text name="name" format="" domainConcept="">fieldNameB</text>
    <text name="type" format="" domainConcept="">int</text>
    <text name="value" format="" domainConcept="">42</text>
  </list>
</list>

<!-- Bean type as element of an event -->
<list name="element" format="" domainConcept="">
  <text name="name" format="" domainConcept="">elementName</text>
  <text name="type" format="" domainConcept="">org.openengsb.SomeBean</text>
  <list name="field" format="" domainConcept="">
    <text name="name" format="" domainConcept="">fieldNameA</text>
    <text name="type" format="" domainConcept="">java.lang.String</text>
  <text name="value" format="" domainConcept="">42</text>
  </list>
  <list name="field" format="" domainConcept="">
    <text name="name" format="" domainConcept="">fieldNameB</text>
    <text name="type" format="" domainConcept="">int</text>
    <text name="value" format="" domainConcept="">42</text>
  </list>
</list>
            ]]>
          </programlisting>
        </listitem>
        <listitem>
          References - when an object is contained twice in one message it can be referenced, which will guarantee that after
          de-serialization both references point to the same object.
          <programlisting language="xml">
            <![CDATA[ 
<!-- Reference type as two fields of a bean - both fields refer to the same object -->
<list name="field" format="" domainConcept="">
  <text name="name" format="" domainConcept="">foo</text>
  <text name="type" format="" domainConcept="">org.openengsb.SomeBean</text>
  <text name="id" format="" domainConcept="">0</text>
  <list name="bean" format="" domainConcept="">
  </list>
</list>
<list name="field" format="" domainConcept="">
  <text name="name" format="" domainConcept="">bar</text>
  <text name="type" format="" domainConcept="">org.openengsb.SomeBean</text>
  <text name="reference" format="" domainConcept="">0</text>
</list>

<!-- Reference type as two arguments - both arguments refer to the same object -->
<list name="argument" format="" domainConcept="">
  <text name="name" format="" domainConcept="">arg0</text>
  <text name="type" format="" domainConcept="">org.openengsb.SomeBean</text>
  <text name="id" format="" domainConcept="">0</text>
  <list name="bean" format="" domainConcept="">
  </list>
</list>
<list name="argument" format="" domainConcept="">
  <text name="name" format="" domainConcept="">arg1</text>
  <text name="type" format="" domainConcept="">org.openengsb.SomeBean</text>
  <text name="reference" format="" domainConcept="">0</text>
</list>

<!-- Reference type as two elements of an event - both elements refer to the same object -->
<list name="element" format="" domainConcept="">
  <text name="name" format="" domainConcept="">foo</text>
  <text name="type" format="" domainConcept="">org.openengsb.SomeBean</text>
  <text name="id" format="" domainConcept="">0</text>
  <list name="bean" format="" domainConcept="">
  </list>
</list>
<list name="element" format="" domainConcept="">
  <text name="name" format="" domainConcept="">bar</text>
  <text name="type" format="" domainConcept="">org.openengsb.SomeBean</text>
  <text name="reference" format="" domainConcept="">0</text>
</list>
            ]]>
          </programlisting>
        </listitem>
        <listitem>
          Arrays - Arrays of all other types of elements are supported.
          <programlisting language="xml">
            <![CDATA[ 
<!-- Array type as field of a bean -->
<list name="field" format="" domainConcept="">
  <text name="name" format="" domainConcept="">fieldName</text>
  <text name="type" format="" domainConcept="">[Ljava.lang.String;</text>
  <text name="id" format="" domainConcept="">0</text>
  <list name="array" format="" domainConcept="">
    <list name="arrayElement" format="" domainConcept="">
      <text name="name" format="" domainConcept="">arrayElement0</text>
      <text name="type" format="" domainConcept="">java.lang.String</text>
      <text name="value" format="" domainConcept="">42</text>
    </list>
    <list name="arrayElement" format="" domainConcept="">
      <text name="name" format="" domainConcept="">arrayElement1</text>
      <text name="type" format="" domainConcept="">java.lang.String</text>
      <text name="value" format="" domainConcept="">43</text>
    </list>
  </list>
</list>

<!-- Primitive type as argument of a method call -->
<list name="argument" format="" domainConcept="">
  <text name="name" format="" domainConcept="">arg0</text>
  <text name="type" format="" domainConcept="">[I</text>
  <text name="id" format="" domainConcept="">0</text>
  <list name="array" format="" domainConcept="">
    <list name="arrayElement" format="" domainConcept="">
      <text name="name" format="" domainConcept="">arrayElement0</text>
      <text name="type" format="" domainConcept="">int</text>
      <text name="value" format="" domainConcept="">42</text>
    </list>
    <list name="arrayElement" format="" domainConcept="">
      <text name="name" format="" domainConcept="">arrayElement1</text>
      <text name="type" format="" domainConcept="">int</text>
      <text name="value" format="" domainConcept="">43</text>
    </list>
  </list>
</list>

<!-- Primitive type as element of an event -->
<list name="element" format="" domainConcept="">
  <text name="name" format="" domainConcept="">elementName</text>
  <text name="type" format="" domainConcept="">[I</text>
  <text name="id" format="" domainConcept="">0</text>
  <list name="array" format="" domainConcept="">
    <list name="arrayElement" format="" domainConcept="">
      <text name="name" format="" domainConcept="">arrayElement0</text>
      <text name="type" format="" domainConcept="">int</text>
      <text name="value" format="" domainConcept="">42</text>
    </list>
  </list>
</list>
            ]]>
          </programlisting>
        </listitem>
        <listitem>
          Events - Events are also allowed as parameters, return values, bean fields, etc.
          <programlisting language="xml">
            <![CDATA[ 
<!-- Event type as field of a bean -->
<list name="field" format="" domainConcept="">
  <text name="name" format="" domainConcept="">fieldName</text>
  <text name="type" format="" domainConcept="">org.openengsb.SomeEvent</text>
  <text name="id" format="" domainConcept="">0</text>
  <list name="event" format="" domainConcept="">
    <text name="event" format="" domainConcept="">org.openengsb.SomeEvent</text>
    <list name="superclasses" format="" domainConcept="">
      <text name="superclass" format="" domainConcept="">org.openengsb.core.model.Event</text>
      <text name="superclass" format="" domainConcept="">java.lang.Object</text>
    </list>
    <text name="name" format="" domainConcept="">someEvent</text>
    <text name="domain" format="" domainConcept="">domain</text>
    <text name="toolConnector" format="" domainConcept="">someTool</text>
  </list>
</list>

<!-- Event type as argument of a method call -->
<list name="argument" format="" domainConcept="">
  <text name="name" format="" domainConcept="">arg0</text>
  <text name="type" format="" domainConcept="">org.openengsb.SomeEvent</text>
  <text name="id" format="" domainConcept="">0</text>
  <list name="event" format="" domainConcept="">
    <text name="event" format="" domainConcept="">org.openengsb.SomeEvent</text>
    <list name="superclasses" format="" domainConcept="">
      <text name="superclass" format="" domainConcept="">org.openengsb.core.model.Event</text>
      <text name="superclass" format="" domainConcept="">java.lang.Object</text>
    </list>
    <text name="name" format="" domainConcept="">someEvent</text>
    <text name="domain" format="" domainConcept="">domain</text>
    <text name="toolConnector" format="" domainConcept="">someTool</text>
  </list>
</list>

<!-- Event type as element of another event -->
<list name="element" format="" domainConcept="">
  <text name="name" format="" domainConcept="">elementName</text>
  <text name="type" format="" domainConcept="">org.openengsb.SomeEvent</text>
  <text name="id" format="" domainConcept="">0</text>
  <list name="event" format="" domainConcept="">
    <text name="event" format="" domainConcept="">org.openengsb.SomeEvent</text>
    <list name="superclasses" format="" domainConcept="">
      <text name="superclass" format="" domainConcept="">org.openengsb.core.model.Event</text>
      <text name="superclass" format="" domainConcept="">java.lang.Object</text>
    </list>
    <text name="name" format="" domainConcept="">someEvent</text>
    <text name="domain" format="" domainConcept="">domain</text>
    <text name="toolConnector" format="" domainConcept="">someTool</text>
  </list>
</list>
            ]]>
          </programlisting>
        </listitem>
      </orderedlist>
    </para>
  </section>
  
  <section id="messageFormat.service">
    <title>Service-Call Message Format</title>
    <para>
      The following two examples show the structure of a service call and the return message.
    </para>
      <programlisting language="xml">
        <![CDATA[ 
<list xmlns="http://org.openengsb/util/serialization" name="methodcall" format="" domainConcept="">
  <text name="method" format="" domainConcept="">foo</text>
  <list name="argument" format="" domainConcept="">
    <text name="name" format="" domainConcept="">arg0</text>
    <text name="type" format="" domainConcept="">java.lang.String</text>
    <text name="value" format="" domainConcept="">some text</text>
  </list>
</list>
        ]]>
      </programlisting>
      <programlisting language="xml">
        <![CDATA[ 
<!--  primitive type as return value -->
<list xmlns="http://org.openengsb/util/serialization" name="returnValue" format="" domainConcept="">
  <text name="name" format="" domainConcept="">value</text>
  <text name="type" format="" domainConcept="">java.lang.String</text>
  <text name="value" format="" domainConcept="">success</text>
</list>

<!-- Some bean as return value -->
<list xmlns="http://org.openengsb/util/serialization" name="returnValue" format="" domainConcept="">
  <text name="name" format="" domainConcept="">value</text>
  <text name="type" format="" domainConcept="">org.openengsb.SomeBean</text>
  <text name="id" format="" domainConcept="">0</text>
  <list name="bean" format="" domainConcept="">
    <list name="field" format="" domainConcept="">
      <text name="name" format="" domainConcept="">fieldNameA</text>
      <text name="type" format="" domainConcept="">java.lang.String</text>
      <text name="value" format="" domainConcept="">foo</text>
    </list>
    <list name="field" format="" domainConcept="">
      <text name="name" format="" domainConcept="">fieldNameB</text>
      <text name="type" format="" domainConcept="">int</text>
      <text name="value" format="" domainConcept="">42</text>
    </list>
    <list name="field" format="" domainConcept="">
      <text name="name" format="" domainConcept="">fieldNameC</text>
      <text name="type" format="" domainConcept="">org.openengsb.SomeBean</text>
      <text name="null" format="" domainConcept=""></text>
    </list>
  </list>
</list>
        ]]>
      </programlisting>
  </section>
  
  <section id="messageFormat.event">
    <title>Event Message Format</title>
    <para>
      The following example shows the structure of an event message.
    </para>
      <programlisting language="xml">
        <![CDATA[ 
<list xmlns="http://org.openengsb/util/serialization" name="event" format="" domainConcept="">
  <text name="event" format="" domainConcept="">org.openengsb.core.model.Event</text>
  <list name="superclasses" format="" domainConcept="">
    <text name="superclass" format="" domainConcept="">java.lang.Object</text>
  </list>
  <text name="name" format="" domainConcept="">event</text>
  <text name="domain" format="" domainConcept="">domain</text>
  <list name="element" format="" domainConcept="">
    <text name="name" format="" domainConcept="">foo</text>
    <text name="type" format="" domainConcept="">java.lang.String</text>
    <text name="value" format="" domainConcept="">42</text>
  </list>
  <list name="element" format="" domainConcept="">
    <text name="name" format="" domainConcept="">bar</text>
    <text name="type" format="" domainConcept="">int</text>
    <text name="value" format="" domainConcept="">21</text>
  </list>
  <list name="element" format="" domainConcept="">
    <text name="name" format="" domainConcept="">buz</text>
    <text name="type" format="" domainConcept="">org.openengsb.SomeBean</text>
    <text name="id" format="" domainConcept="">0</text>
    <list name="bean" format="" domainConcept="">
      <list name="field" format="" domainConcept="">
        <text name="name" format="" domainConcept="">aStringField</text>
        <text name="type" format="" domainConcept="">java.lang.String</text>
        <text name="value" format="" domainConcept="">some text</text>
      </list>
      <list name="field" format="" domainConcept="">
        <text name="name" format="" domainConcept="">b</text>
        <text name="type" format="" domainConcept="">org.openengsb.SomeBean</text>
        <text name="null" format="" domainConcept=""></text>
      </list>
    </list>
  </list>
</list>
        ]]>
      </programlisting>
  </section>
</chapter>
