<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--

    Copyright 2010 OpenEngSB Division, Vienna University of Technology

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

<chapter id="internalConnectors" xmlns="http://docbook.org/ns/docbook">
  <title>Internal Tool Connectors</title>
  <section>
    <title>Introduction</title>
    <para>
      This chapter describes how to implement a tool connector. 
      Target audience are developers who want to connect a tool to OpenEngSB.
      A tool connector is an adapter between a tool and OpenEngSB.
      Every connector belongs to a tool domain which defines the common interface of
      all its tool connectors. This means that the tool connector has to translate all calls to the
      methods defined by the domain to the tool API. Furthermore it has to send Event-Objects
      to the bus when certain events happen in the tool. The Event-Objects are also defined by the
      tool domain.
    </para>
  </section>

  <section>
    <title>Prerequisites</title>
    <para>
      In case it isn't known what a tool domain is and how it defines the interface for
      the tool connector then <xref linkend="toolDomains" /> is a good starting point.
      If there's already a matching domain for this tool it is strongly recommended to use it.
      But if this tool requires a new domain it has to be created. This is also described in <xref linkend="toolDomains" />.
    </para>
  </section>

  <section>
    <title>Context</title>
    <para>
      A connector is a JBI component. It implements the design pattern "Adapter". A tool connector
      has to translate (adapt) between functions and events defined by the domain interface and the tool API.
    </para>
  </section>

  <section>
    <title>Creating a New Connector</title>
    <para>
      The following command is used to automatically create the files needed for a new connector. 
      <literallayout><command>mvn</command> archetype:generate -DarchetypeCatalog="http://maven.openengsb.org/archetypes/"</literallayout>
      
      This command can be executed in any directory. It will create subdirectories with the new projects in
      the current directory.
      
      This command will show a list similar to this:
      
      <literallayout><computeroutput>Choose archetype:
1: http://maven.openengsb.org/archetypes/ -> connector-archetype
2: http://maven.openengsb.org/archetypes/ -> domain-archetype
Choose a number:  (1/2):</computeroutput></literallayout>

      Type the number for the <emphasis>connector-archetype</emphasis>. Maven will ask whether the default values for the
      properties shall be used. Type <userinput>n</userinput> to overwrite the default values.
      The following properties are needed to generate a connector:

      <table>
        <caption>Properties for connector-archetype</caption>

        <colgroup>
          <col width="100" />
          <col width="320" />
        </colgroup>

        <thead>
          <tr>
            <td>Property Name</td>
            <td>Description</td>
          </tr>
        </thead>

        <tbody>
          <tr>
            <td>artifactId</td>
            <td>The artifactId of the generated wrapper project for the service-engine and the service-unit.</td>
          </tr>
          <tr>
            <td>groupId</td>
            <td>The groupId of the generated wrapper project. Should be org.openengsb.</td>
          </tr>
          <tr>
            <td>version</td>
            <td>The version of the generated wrapper project.</td>
          </tr>
          <tr>
            <td>se-artifactId</td>
            <td>The artifactId of the service-engine.</td>
          </tr>
          <tr>
            <td>su-artifactId</td>
            <td>The artifactId of the service-unit.</td>
          </tr>
          <tr>
            <td>description</td>
            <td>The description of the tool connector.</td>
          </tr>
          <tr>
            <td>namespace</td>
            <td>The namespace of the tool connector.</td>
          </tr>
          <tr>
            <td>package</td>
            <td>The package for the source code of the service-engine.</td>
          </tr>
          <tr>
            <td>connector-name</td>
            <td>The connector name. This is used as prefix for Java classes so it should start with an upper-case letter.</td>
          </tr>
          <tr>
            <td>domain-package</td>
            <td>The package where the domain interface can be found which is implemented by this tool connector.</td>
          </tr>
          <tr>
            <td>domain-name</td>
            <td>The interface name of the domain interface that is implemented by this tool connector.</td>
          </tr>
          <tr>
            <td>urn</td>
            <td>The URN that will be used to address this tool connector.</td>
          </tr>
        </tbody>
      </table>
      
    </para>
    <para>
      If all these properties have been set Maven will generate the service-engine and the service-unit for the tool connector.
    </para>

    <section>
      <title>Structure of the Connector Service-Engine</title>
      <para>
        The service-engine contains a stub of the connector endpoint and a simple implementation of the connector component as well as an empty contextProperties descriptor.
        The <filename>pom.xml</filename> file contains the necessary setup and all dependencies needed by an OpenEngSB tool connector service-engine. 
      </para>
      <para>
        <programlisting><![CDATA[service-engine
       |
       ---------------
       |             |
    pom.xml         src
                     |
                    main
                     |
             -----------------
             |               |
            java          resources
             |               |
         <package>   contextProperties.xml
             |
            ---------------------------------------------
            |                                           |
  <connector-name>Endpoint.java            <connector-name>Component.java]]></programlisting>
      </para>
    </section>
  
    <section>
      <title>Structure of the Connector Service-Unit</title>
      <para>
        The service-unit contains a fully configured xbean.xml file that provides the setup for an OpenEngSB tool connector service-unit.
        The <filename>pom.xml</filename> file contains the necessary dependency to the service-engine. 
      </para>
      <para>
        <programlisting>service-unit
       |
       ---------------
       |             |
    pom.xml         src
                     |
                    main
                     |
                 resources
                     |
                 xbean.xml</programlisting>
      </para>
    </section>
    
    <section>
      <title>Integrating the Connector</title>
      <para>
        To integrate the newly created tool connector into the OpenEngSB the following steps have to be performed.
        <itemizedlist>
          <listitem>The service-engine and the service-unit have to be copied to the correct folder, which is starting from the OpenEngSB
           root folder <filename>/domains/domain-name/connector-name</filename> where domain-name and connector-name
           should be replaced by the respective names for the current tool connector.</listitem>
          <listitem>Parent <filename>pom.xml</filename>: Add the service engine and the service unit in
            the modules section and add the dependencies to the service-engine and the service-unit
            to the dependencyManagement section.</listitem>
          <listitem>Service-engine <filename>pom.xml</filename>: Correct the link to the parent <filename>pom.xml</filename>.
            (groupId, artifactId, version and relativePath).</listitem>
          <listitem>Service-unit <filename>pom.xml</filename>: Correct the link to the parent <filename>pom.xml</filename>.
            (groupId, artifactId, version and relativePath).</listitem>
          <listitem>Packaging: Add the dependency to the service-unit to the package-all service assembly's
            <filename>pom.xml</filename>. </listitem>
        </itemizedlist>
      </para>
    </section>
    
    <section>
      <title>Example: Produce one Simple Connector</title>
       TBW (use new architecture)
    </section>
    
    <section>
      <title>Closing Remarks</title>
      <para>
        TBW:  what to read next, what to take care of additionally.
      </para>
    </section>
      

  </section>

</chapter>
