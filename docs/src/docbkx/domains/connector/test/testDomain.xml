<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--

    Copyright 2010 OpenEngSB Division, Vienna University of Technology

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

<chapter id="testDomain" xmlns="http://docbook.org/ns/docbook">
  <title id="testDomain.title">Test Domain</title>
  
  <warning>
    <para>    
      This page is only a proposal! This means that everyone is allowed to edit this page and it is 
      marked for change. This proposal could be seen as design idea and should be discussed in public
      and visible for everyone before implemented at all.
    </para>
  </warning>
  
  <para>
    The Test Domain is also characterized by Ant and Maven. Because both tools include the tests in the build process.
    Maven considers a test failure to be a build failure, when the goals package or install are used.
  </para>
  
  <para>
    Another important aspect for the test domain is which Test Framework is used for the test. Especially, the JUnit and the TestNG plays important roles.
  </para>
  
  <section>
    <title>Comparison</title>
	
    <para>
      The Comparison of Maven and Ant is already defined in the chapter Build Domain.
    </para>
  
    <informaltable>
      <thead>
        <tr>
          <td>Options</td>
          <td>Meaning</td>
          <td>JUnit</td>
          <td>TestNG</td>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>outputDirectory</td>
          <td>A String indicating the directory where should the XML files be outputed.</td>
          <td>+</td>
          <td>+</td>
        </tr>
        <tr>
          <td>timestampFormat</td>
          <td>Specifies the format of date fields that are generated by this reporter.</td>
          <td>+</td>
          <td>+</td>
        </tr>
        <tr>
          <td>fileFragmentationLevel</td>
          <td>An integer having the values 1, 2 or 3, indicating the way that the XML files are generated, 1 - will generate all the results in one file, 2 - each suite is generated in a separate XML file that is linked to the main file, 3 - same as 2 plus separate files for test-cases that are referenced from the suite files.</td>
          <td>-</td>
          <td>+</td>
        </tr>
        <tr>
          <td>splitClassAndPackageNames</td>
          <td>This boolean specifies the way that class names are generated for the &lt;class> element. For example, you will get &lt;class class="com.test.MyTest"> for false and &lt;class class="MyTest" package="com.test"> for true.</td>
          <td>-</td>
          <td>+</td>
        </tr>
        <tr>
          <td>generateGroupsAttribute</td>
          <td>A boolean indicating if a groups attribute should be generated for the &lt;test-method> element. This feature aims at providing a straight-forward method of retrieving the groups that include a test method without having to surf through the &lt;group> elements.</td>
          <td>-</td>
          <td>+ </td>
        </tr>
        <tr>
          <td>stackTraceOutputMethod</td>
          <td>Specifies the type of stack trace that is to be generated for exceptions and has the following values, 0 - no stacktrace (just Exception class and message), 1 - a short version of the stack trace keeping just a few lines from the top, 2 - the complete stacktrace with all the inner exceptions, 3 - both short and long stacktrace</td>
          <td>-</td>
          <td>+</td>
        </tr>
        <tr>
          <td>generateDependsOnMethods</td>
          <td>Use this attribute to enable/disable the generation of a depends-on-methods attribute for the &lt;test-method> element. </td>
          <td>-</td>
          <td>+</td>
        </tr>
        <tr>
          <td>generateDependsOnGroups</td>
          <td>Enable/disable the generation of a depends-on-groups attribute for the &lt;test-method> element. </td>
          <td>-</td>
          <td>+</td>
        </tr>
        <tr>
          <td>forkmode</td>
          <td>JVM should be forked for each test.</td>
          <td>+</td>
          <td>-</td>
        </tr>
      </tbody>
    </informaltable>
    
    <para>
      A big advantage is that Ant use JUnit as one of the tasks to set options, that could be used all the time.
      For example, there could be set:
      
      <itemizedlist>
        <listitem>JVM</listitem>
        <listitem>Timeout in milliseconds</listitem>
        <listitem>the output can be handled with a formatter or to decide if it is shown or not</listitem>
        <listitem>the max. Memory for the forked JVM</listitem>
      </itemizedlist>
      
      At the end of the test, a result object should be used to manage the different objects from the tools.
      
    </para>
    
  </section>
  
  <section>
    <title>Interface</title>
    
    <programlisting><![CDATA[public interface Test  {
   
	/**
	 * executes the single Tests
	 * @throws TestException
	 */
	public void executeTests() throws TestException;
	
	/**
	 * get the depended Files from the Classpath
	 * @return as a List of Files
	 * @throws TestException
	 */
	public List<File> getClasspath() throws TestException;

	/**
	 * includes the given tests to the execution 
	 * default, all tests are included
	 * @param includes - tests that should be executed
	 * @return 
	 * @throws TestException
	 */
	public Test include(String... includes) throws TestException;
 
	/**
	 * Supplies the tests, that are included for the run
	 * @return as a Set of Strings
	 * @throws TestException
	 */
    public Set<String> getIncludes() throws TestException;
	
	/**
	 * excludes the given tests from the execution 
	 * default, all tests are included
	 * @param excludes - tests that should not be executed
	 * @return 
	 * @throws TestException
	 */
	public Test exclude(String... excludes) throws TestException;

	/**
	 * Supplies the tests, that are excluded for the run
	 * @return as a Set of Strings
	 * @throws TestException
	 */
    public Set<String> getExcludes() throws TestException;
 

    /**
     * Returns the directory for the test classes
     * @return as a File
     * @throws TestException
     */
    public File getTestClassesDir() throws TestException;

    /**
     * Sets the directory for the test classes
     * @param testClassesDir as a File
     * @throws TestException
     */
    public void setTestClassesDir(File testClassesDir) throws TestException;

    /**
     * Supplies the destination where the output of the test should be placed
     * @return the destination as a File Object
     * @throws TestException
     */
    public File getTestResultsDir() throws TestException;

    /**
     * Sets the destination where the output of the test should be placed
     * @param testResultsDir the destination as a File Object
     * @throws TestException
     */
    public void setTestResultsDir(File testResultsDir) throws TestException;

    /**
     * Supplies the destination where the report of the test should be placed
     * @return the destination as a File Object
     * @throws TestException
     */
    public File getTestReportDir() throws TestException;

    /**
     * Sets the destination where the report of the test should be placed
     * @param testResultsDir the destination as a File Object
     * @throws TestException
     */
    public void setTestReportDir(File testReportDir) throws TestException;

    /**
     * Returns whether it should throw an exception in case of test failure or error.
     * @return true if a stop should be prepared at failure or error
     * @throws TestException
     */
    public boolean isStopAtFailuresOrErrors() throws TestException;
    
    /**
     * Sets whether it should throw an exception in case of test failure or error.
     * @param stopAtFailuresOrErrors - true to stop at failure or error
     * @throws TestException
     */
    public void setStopAtFailuresOrErrors(boolean stopAtFailuresOrErrors) throws TestException;
    
    /**
     * Backwards compatible access to the TestFramework options.
     *
     * Be sure to call the appropriate useJUnit/useTestNG/useTestFramework function or set the default before using this function.
     *
     * @return The testframework options.
     */
    public Object getOptions(TestFramework testframework) throws TestException;

    
    /**
     * Returns the actual set Testframework
     * @return the actual testframework
     * @throws TestException
     */
    public TestFramework getTestFramework() throws TestException;

    /**
     * Sets a testframework
     * @param testframework - possible frameworks are junit o testng
     * @throws TestException
     */
    public void setTestFramework(TestFramework testframework) throws TestException;

    /**
     * Use the JUnit Framework
     * @throws TestException
     */
    public void useJUnit() throws TestException;

    /**
     * Use the TestNG Framework
     * @throws TestException
     */
    public void useTestNG() throws TestException;
    
    /**
     * enable the test report
     * default: disabled
     * @throws TestException
     */
    public void enableTestReport() throws TestException;

    /**
     * disable the test report
     * @throws TestException
     */
    public void disableTestReport() throws TestException;

    /**
     * Returns a List of Files which are included in the test source directories
     * @return the test source directories
     * @throws TestException
     */
    public List<File> getTestSrcDirs() throws TestException;

    /**
     * Sets the test source directories 
     * @param testSrcDir directories that are supposed to run
     * @throws TestException
     */
    public void setTestSrcDirs(List<File> testSrcDir) throws TestException;]]></programlisting>
    
  </section>
  
  <section>
    <title>TestFramework Interface</title>
    
    <programlisting><![CDATA[public interface TestFramework {
	
	/**
	 * Initializing the objects for the Execution, Report and Options 
	 * @param project - Project from the execution tool
	 * @throws TestException
	 */
    void initialize(Object project, Test testTask) throws TestException;
    
    /**
     * prepare the test class directory and the classpath
     * @param project - maven supports a default test class directory
     * @param testTask - contains the test class directory and the classpath
     * @throws TestException
     */
    void prepare(Object project, Test testTask) throws TestException;

    /**
     * executes the tests for the project and includes or excludes the chosen tests
     * @param project - actual project 
     * @param testTask - tests from the project
     * @param includes - tests are included
     * @param excludes - tests are excluded
     * @throws TestException
     */
    void execute(Object project, Test testTask, Collection<String> includes, Collection<String> excludes) throws TestException;

    /**
     * generate the report if the flag for reporting is set
     * @param project - actual project
     * @param testTask - tests for the project
     * @throws TestException
     */
    void report(Object project, Test testTask) throws TestException;
    
    /**
     * Returns the options for the chosen test framework
     * @return - the chosen options for the framework 
     * @throws TestException
     */
    TestFrameworkOptions getOptions() throws TestException;]]></programlisting>
    
  <section>
    <title>TestframeworkOptions</title>
    
    <para>
      There are a lot of options that could be set. But I think one of the main issues is the fork mode. So I only added this to this Interface.
    </para>
    
    <programlisting><![CDATA[public interface TestFrameworkOptions {

	/**
	 * checks, if the fork mode is set
	 * @return true, if the fork mode is set
	 */
	public boolean isForkMode();
	
	/**
	 * sets the
	 * @param forkmode - true to set it
	 */
	public void setForkMode(boolean forkmode);]]></programlisting>
  
  </section>
  
  <section>
    <title>ForkMode Enum</title>

    <programlisting><![CDATA[public enum ForkMode {
    PER_TEST("perTest"), ONCE("once");

    ForkMode(String name) {
        this.name = name;
    }

    String name;

    public String toString() {
        return name;
    }
}]]></programlisting>

  </section>
</section>
</chapter>
