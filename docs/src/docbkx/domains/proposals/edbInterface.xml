<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--

   Copyright 2010 OpenEngSB Division, Vienna University of Technology

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

-->
<chapter id="edb" xmlns="http://docbook.org/ns/docbook">
  <title id="edb.title">EDB Domain</title>
  
  <warning>
    <para>
      This page is only a proposal! This means that everyone is allowed to edit this page and it is 
      marked for change. This proposal could be seen as design idea and should be discussed in public
      and visible for everyone before implemented at all.
    </para>
  </warning>

  <section>
    <title>Search</title>

    <para>
      current search strings look like; 
      path/to/some/thing/*/*[attribute1=value1][attribute2=value2], with a fixed number
      of path elements (8 for hydro) and any number of attributes. 
      (like from the XPath-Queries in JCR)
      Lucene (now the search engine):
      path:path/to/some/thing* AND attribute1:value1 AND attribute2:value2
      BUT: <![CDATA[/**+ - && || ! ( ) { } [ ] ^ " ~ * ? : \]]> are special characters and 
      should be escaped before passing the query to the searcher

      util-class for query "translation" ?
    </para>
  </section>
  
  <section>
    <title>proposal search syntax</title>

    <para>
      *OR:
      Base is optional and looks like: path/to/some/thing*
      Base is used for all Options, not only the first one
      If Base is not used the Syntax could be [1] or [2] 
    </para>
  
    <para>
      Syntax:
      normal: Base AND Option1 OR Option2 OR Option3
      [1] * AND Option1 OR Option2 OR Option3
      [2] Option1 OR Option2 OR Option3
    </para>
     
    <para>
      *EXISTS:
      Exists returns a Query with a certain Data
      eg. UUID of a Hydro Signal 
    </para>
  
    <para>
      Syntax:
      EXISTS uuid --> returns a single dataset
    </para> 
  
    <para>
      *SIMILAR:
      Similarity Serach on base of Levenshtein-Distance adepted for Signals:
      abc/def/ghi/jkl - abc/def/ghi/jkl: distance 0
      abc/def/ghi/jkl - abc/xxx/ghi/jkl: distance 1
      abc/def/ghi/jkl - abc/def/ghi/xxx: distance 1
      abc/def/ghi/jkl - abc/def/ghi/jkl/xxx: distance 1
      abc/def/ghi/jkl - abc/xxx/ghi/yyy: distance 2 
  </para>
  
  <para>
    Additional: weighting of fields
    the importance of every field is not equivalent, so they can be weighted
    default weight: 1
  </para>
  
  <para>
    Syntax:
    SIMILAR abc/def/ghi/jkl
    SIMILAR abc/def/ghi/jkl WEIGHTED [abc:1][def:2][ghi:3][jkl:4]
    SIMILAR abc/def/ghi/jkl WEIGHTED [abc:2]
    SIMILAR abc/def/ghi/jkl WEIGHTED [abc:2][def:2][jkl:4]
  </para> 
  
  </section>

  <section>
    <title>read-write operations</title>

    <para>
      add element to EDB, current standard
      show diff: from last add, needed soon (?)
      missing: remove, revert
    </para>
  </section>

  <section>
    <title>error strategies</title>
    
    <para>
      search index may become broken during a commit or 'foreign' disk access, there should be an automated repair utility
      git index may become broken ... we need a reliable reset functionality
      -> lucene index repairer and jgit reset
    </para>
  </section>
  
  <section>
    <title>message schema</title>

    <para>
      schema has to support command modes: add (insert or update) and remove (delete ?or ignore?)
      schema has to support a rollback command (no content) with params steps (how many checkins to revert)
      and mode (arbitary usage, for git it will be hard, soft and mixed, 
      on others SCMs it may be 'show rollback in history' or 'switch to new branch'
    </para>

    <para>
      metadata has to be added (partially existing already) user, tool and time
      -> radical schema rewrite
    </para>
  </section>
  
  <section>
    <title>duplicate detection</title>
	
    <para>
	  old content is inserted everytime a commit happens, some duplicate detection will be needed 
	  trivial: UUID, realistic: set of custom fields
	  -> we need the detection used in the CommitService, the behavior and search itself 
	  may be placed in its own class (per strategy)
    </para>
  </section>

  <section>
    <title>version detection</title>

    <para>
      on insertion, duplicate detecton even has to search through the history to see if the last
      commit from the same user/tool combination updated his data fields. in addition, the user/tool
      may specify which fields it will change, ?every other changed field may be regarded as outdated?
      -> we need history lookup
      for git: branch, checkout/reset, search/compare, enhance commit data, commit to original, delete branch
	</para>
  </section>
  
  
  <section>
    <title>split SCM of search index and content</title>

    <para>
      two different jgit repos should be maintained by the edb: one for the search index and one for the content
      this becomes important on history lookup, general efficiency and repair functionality
    </para>
  </section>
</chapter>
