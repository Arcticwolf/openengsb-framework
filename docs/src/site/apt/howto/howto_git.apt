Initial setup:

* create a fork on github
* clone the original repo:
$ git clone git@github.com/openengsb/openengsb
* add your fork as remote
$ git remote add <username> git@github.com/<username>/openengsb
Example:
$ git remote add ChristophGr git@github.com/ChristophGr/openengsb

To start some new feature:
* be sure your master is up-to-date
$ git checkout master
$ git pull origin master

* then create a new devbranch
$ git checkout -b newfeature

* and start committing to your local branch.

* To publish the branch on github do:
$ git push <username> newfeature

// TODO implement rule 5
-----------------------------------------
* If the development in the branch takes some time, it may happen, that the master-branch changes in a way that affects your featurebranch.
To check how your branch behaves on the current master you can merge the changes into your devbranch.

$ git checkout newfeature
$ git merge --no-commit --no-ff master

If it does not affect your development in any way, do not commit the merge, but rather undo it.
$ git reset --hard

If it does affect your development, you need to commit the merge.
If the merge breaks something in your dev-branch, fix all issues before commiting the merge.
When done fixing potential issues do
$ git commit
------------------------------------------- // rule 5?


If your feature ready to be merged to master:

$ git checkout master
$ git merge --no-ff --no-commit <username>/newfeature # we use the remote name here

If some issues arised due to the merge, fix them now (before committing). When you're done do
$ git commit



## Rules

1) All development is done in forks (also of the core developers)

2) Rebase is NOT dead (although we use merges). NEVER EVER commit local
merges. You still have to develop in local dev branches and rebasing them
with the upstream branches. Only if nobody else has access to your fork you
can be sure that nobody changed it on the way!

3) Merges to the master have to be done from the upstream branches not the
local ones! This means if you want to merge the branch test from the fork
eyeball into the master do NOT use

$ git checkout test eyeball/test
$ git checkout master
$ git merge test

BUT rather
$ git checkout master
$ git merge eyeball/test

This will create much better readable merge nodes.

4) if merging branches from forked repositories ALWAYS use the --no-ff option
for merges; this will always create a merge node (even if a fast-forward
merge is possible). This is required to create a clear and consistent
history!

5) Avoid backward merges from the master and keep feature branches small!
Merging the master backward into the feature branches creates A LOT of merge
nodes and a mess in the visualisations of the branches! But this also
requires to keep the features small! Create features which can be handled in
2 to three days;

?????????????????
If the feature branch is than not merged into the master
(because review is required or something else) you can create a new branch
from the latest master and merge your feature branch into this one; Although
this may create many branches the number of merge nodes backward from the
master will keep small.
???????????????????

6) use MEANINGFUL feature branch names. Using the merge history in the master
you can easily follow the development of features. But this requires (maybe
long) good names! Having 7 twitter or test branches merged helps absolutely
nothing and will only create a mess!

7) Keep your forks clean; although git can handle thousands of branches in
thousands of forks we (as commiter) cant. Having all the forks as remote
repositories makes it really hard for us to handle all the branches in all
the forks. Therefore please remove ALL branches already merged or not
required. Also remove your forked master and the already existing branches.
You can remove your local master by changing in the admin page of your fork
the default branch to your current branch; if master is no longer the
default branch you can kick it. Additionally its nevertheless better to use
the remote master instead of your forked to kick off your dev branches...
