~~
~~  Copyright 2010 OpenEngSB Division, Vienna University of Technology
~~
~~   Licensed under the Apache License, Version 2.0 (the "License");
~~   you may not use this file except in compliance with the License.
~~   You may obtain a copy of the License at
~~
~~       http://www.apache.org/licenses/LICENSE-2.0
~~
~~   Unless required by applicable law or agreed to in writing, software
~~   distributed under the License is distributed on an "AS IS" BASIS,
~~   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~   See the License for the specific language governing permissions and
~~   limitations under the License.
~~
Web Configuration Interface

  The embedded web app adds the possibility to create, configure and monitor service assemblies through
a web interface.

   Configuration of anservice assembly for an JBI-compliant ESB is mainly
done by editing xml-files. Build tools like maven help by providing
support for building the deployment file. Still, writing the xml files manually is a time consuming task.

   The provided web app should ease the process of creating, configuring and monitoring service
assemblies by providing an intuitive interface and immediate validation.

* Current Prototype

   The web application is startable by running <<<mvn jetty:run-war>>> inside the <openengsb-embedded> project.

   Note: All openengsb projects should be installed in the local maven repository. This starts an integrated
ServiceMix in the background and the web app at the url {{http://localhost:8080}}. Currently, there is only a descriptor
for the {{{http://servicemix.apache.org/servicemix-file.html}servicemix-file}} JBI component.

* Creating a Service Assembly

   The following <Hello World> style example creates a SA, which polls for new files in one directory and writes
the polled file to another directory.

   * Create a new SA by clicking <Create New Assembly>. A view for adding new Service Units appears.

   * Create a new <servicemix-file:sender> SU.

   * Configure at least the following parameters for the sender SU:

     * Service: A unique name for the service, e.g. <<<fileSender>>>.

     * Endpoint: A name for the endpoint, e.g. <<<endpoint>>>.

     * Outbox: Directory where the file sender should put incoming files.

   * Click <Save Me!> to save the SU configuration.

   * Now, create a second SU of type <servicemix-file:poller>.

   * Configure at least the following parameters for the poller SU:

     * Service: A unique name for the service, e.g. <<<filePoller>>>.

     * Endpoint: A name for the endpoint, e.g. <<<endpoint>>>.

     * Target Service: Put the service name of the sender SU, e.g. <<<fileSender>>>.

     * Target Endpoint: Put the endpoint name of the sender SU, e.g. <<<endpoint>>>.

     * Period: Interval the SU should check for new files in the inbox, in milliseconds.

     * Inbox: Directory which the SU checks for incoming files.

     * Delete File: Check this if the SU should remove the files from the inbox.

   * Click <Save Me!> to save the SU.

   * Click <Deploy> to deploy the configured SA into the embedded ServiceMix.

   * Now it should be possible to put xml files into the inbox directory. The file
     will be picked up by ServiceMix and copied to the outbox directory.

* Adding support for new JBI components

  TBW - descriptor, schema, language file

