~~
~~	Copyright 2010 OpenEngSB Division, Vienna University of Technology
~~
~~   Licensed under the Apache License, Version 2.0 (the "License");
~~   you may not use this file except in compliance with the License.
~~   You may obtain a copy of the License at
~~
~~       http://www.apache.org/licenses/LICENSE-2.0
~~
~~   Unless required by applicable law or agreed to in writing, software
~~   distributed under the License is distributed on an "AS IS" BASIS,
~~   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~   See the License for the specific language governing permissions and
~~   limitations under the License.
~~
  [ATTENTION:] This page is only a proposal! This means that everyone is allowed to edit this page and it is 
  			   marked for change. This proposal could be seen as design idea and should be discussed in public
  			   and visible for everyone before implemented at all.

SCM Domain

  This document describes a generic interface to the common functionality of SourceCode Management systems (SCM) to be used in EngSB.
  While there are lots of different SCMs out there, Two centralized (SVN and CVS) and two distributed (Bazaar and Git) were examined and compared to each other.
  A summary of the SCMs' detailed functionality is given in {{comparison}} and the resulting methods of the interface in {{interface}}.

*Comparison

  This comparison is based on SVN-commands and compares the other systems' abilities to support or mimic their semantics.\
  '+' means the same command is already built in in the other system.\
  'o' means the semantics exist in the other system but not in the exact same way as in SVN.\
  '-' means the other system does not support the semantics and this can either not be done at all or only with some not practical workaround.\
  
  However, some things work inherently different in the systems and have an important impact on the implementation:
  
  * A commit in centralized systems means, transfer all changes to the remote repository, while, in distributed systems it means, log the changes locally. To reach the same semantics, all implementations of the interface for distributed systems every commit will have to be followed by a push!
  
  * While distributed SCMs allow to create a local repository, centralized systems require a remote repository to check out from before being able to edit anything. Thus, in this regard, distributed systems must be treated as centralized ones to establish a common semantic.
  
  * Branching and tagging works really different in all the systems. However the interface was designed to support a common subset of the branching/merging functionality. 

[]

*---+---+---+---*---*---*---*---+
|Feature|Alias|Meaning|SVN|CVS|Git|Bzr|Comments |
*---+---+---+---*---*---*---*---+
|add| |add files to local repo|+|+|+|+|trivial; same for al SCMs |
*---+---+---+---*---*---*---*---+
|blame|praise, annotate, ann|annotates lines with last revision and author who changed it|+|+|+|+|trivial; same for all SCMs |
*---+---+---+---*---*---*---*---+
|checkout|co|checkout working copy from repository|+|+|+|+|trivial; same for all SCMs |
*---+---+---+---*---*---*---*---+
|delete|del, remove, rm|remove file from version control (path or URL)|+|+|+|+| |
*---+---+---+---*---*---*---*---+
|diff|di|display changes between revisions or paths|+|+|+|+| |
*---+---+---+---*---*---*---*---+
|log| |show log messages for a set of revisions|+|+|+|+| |
*---+---+---+---*---*---*---*---+
|status|stat, st|print status of working copy files|+|+|+|+|bzrs status and info have swapped semantics in comparison so SVN |
*---+---+---+---*---*---*---*---+
|commit|ci|send changes from working copy to repository|+|+|o|o|Git and Bzr will additionally have to push changes |
*---+---+---+---*---*---*---*---+
|branch|tag|Create new Branch/Tag|o|o|+|+|done with cp in SVN; done with tag in CVS |
*---+---+---+---*---*---*---*---+
|merge| |apply differences between two sources to a working copy|+|o|+|+|CVS uses update |
*---+---+---+---*---*---*---*---+
|export| |create an unversioned copy of a tree|+|+|o|+|done with checkokut-index in Git |
*---+---+---+---*---*---*---*---+
|import| |commit unversioned file/tree into repository|+|+|o|+|done with add| commit in Git |
*---+---+---+---*---*---*---*---+
|switch|sw|update working copy to a different URL|+|o|o|+|CVS uses update; git uses checkout; | 
*---+---+---+---*---*---*---*---+
|update|up|bring changes from repo to WC|+|+|o|+|bzr will have to use pull |
*---+---+---+---*---*---*---*---+
|mergeinfo| |display information relatied to (potential) merges|+|-|-|-| |
*---+---+---+---*---*---*---*---+
|list|ls|list directory entries from repository|+|+|-|+| |
*---+---+---+---*---*---*---*---+
|info| |print info about remote/local object|+|-|-|+|bzrs status and info have swapped semantics in comparison so SVN |
*---+---+---+---*---*---*---*---+
|changelist| |a-/dissociate changelist with file|+|-|-|-| |
*---+---+---+---*---*---*---*---+
|cleanup| |clean up working copy â†’ remove locks, resume operations|+|-|-|-| |
*---+---+---+---*---*---*---*---+
|lock| |lock path|+|-|-|-| |
*---+---+---+---*---*---*---*---+
|move|mv, rename, ren|move and or rename something (WC or URL)|+|-|+|+|CVS could be supported by OS-mv| CSV rm and CSV add| destroying the history however |
*---+---+---+---*---*---*---*---+
|copy|cp|Copy files (with history) to/from WC/URL|+|-|-|-| |
*---+---+---+---*---*---*---*---+
|unlock| |unlock path|+|-|-|-| |
*---+---+---+---*---*---*---*---+
|pull| |different meanings in bzr and git|-|-|+|+| |
*---+---+---+---*---*---*---*---+
|mkdir| |create version controlled directory (locally or repo)|+|-|-|+|Could be bypassed with OS-mkdir and SCM-add |
*---+---+---+---*---*---*---*---+
|revert| |undoes most local edits|+|-|+|+|CVS needs to bypass this with update |
*---+---+---+---*---*---*---*---+
|cat|cl, cat-file|output content of files/URLs at revision|+|-|+|+|could be used only for local files (not URIs) and bypassed by directly reading the file from within java |
*---+---+---+---*---*---*---*---+
|resolve| |resolves conflicts|+|-|-|+| |
*---+---+---+---*---*---*---*---+
|resolved| |marks conflicts as resolved|+|-|-|-| |
*---+---+---+---*---*---*---*---+
| | | | | | | | |
*---+---+---+---*---*---*---*---+
|propdel|pdel, pd|property handling|+| | | |very SVN and OS specific |
*---+---+---+---*---*---*---*---+
|propedit|pedit, pe|property handling|+| | | |very SVN and OS specific |
*---+---+---+---*---*---*---*---+
|propget|pget, pg|property handling|+| | | |very SVN and OS specific |
*---+---+---+---*---*---*---*---+
|proplist|plist, pl|property handling|+| | | |very SVN and OS specific |
*---+---+---+---*---*---*---*---+
|propset|pset, ps|property handling|+| | | |very SVN and OS specific |
*---+---+---+---*---*---*---*---+
Comparison of SCMs


*The {Interface}

  These method-stubs resemble the interface derived from the {{comparison}}. Some explanations and demands on the implementation:
  
  * Every method may throw a generic ScmException for simple and unexpected errors such as missing permissions, missing network-connection but also to indicate requests that are not possible to fulfill in a certain implementation of an SCM. 
  
  * Revisions are modeled as Strings instead of ints, since their format can vary a lot, depending on the actual SCM.
  
  * "HEAD" should always be treated as the most recent revision, regardless whether the SCM supports it natively or not.
  
  * Authentication data needs to be supplied via the SU configuration.
  
  * The path to the working copy's root on the file-system needs to be supplied via the SU configuration.
  
  * Paths should be treated cautiously. They must not exit the working copy (via '..' or '/not/the/working/copy') and should always be treated as relative to the working copy's root.
  
  []
  
  Some methods, which are expected to take some time to finish are also modeled as asynchronous calls. This is obviously done to improve performance and to not force the caller to wait an arbitrary amount of time, doing nothing.
  
---
/**
 * Adds File file or folder to version control.
 * @param file The path to the file or folder to be (recursively) added. Relative to the working copy's root.
 * @throws ScmException for a generic indication of failure while adding the file.
 */
---
  public void add (String file) throws ScmException;

---
/**
 * Annotates each line of a file's content with additional data (revision and author of last modification) and returns the content.
 * @param The path to the file to be blamed. Relative to the working copy's root.
 * @return the annotated content
 * @throws ScmException for a generic indication of failure while annotating the file.
 */
---
  public String blame (String file) throws ScmException;

---
/**
 * Annotates each line of a file's content with additional data (revision and author of last modification) and returns the content.
 * @param file The path to the file to be blamed. Relative to the working copy's root.
 * @param revision The file's revision to be annotated
 * @return the annotated content
 * @throws ScmException for a generic indication of failure while annotating the file.
 */
---
  public String blame (String file, String revision) throws ScmException;

---
/**
 * Checks out the remote repository's content into the folder supplied in the SU-configuration
 * @param repository The URI to the remote repository
 * @param author The author's name/id
 * @return A list of files that were checked out, supplied and formatted by the underlying implementation
 * @throws ScmException for a generic indication of failure while checking out
 */
---
  public String[] checkout (URI repository, String author) throws ScmException;
  
---
/**
 * Checks out the remote repository's content into the folder supplied in the SU-configuration
 * @param repository The URI to the remote repository
 * @param author The author's name/id
 * @throws ScmException for a generic indication of failure while checking out
 */
---
  public void checkoutAsynchronous (URI repository, String author) throws ScmException;

---
/**
 * Marks a file for deletion from version control
 * @param file The path to the file to be deleted. Relative to the working copy's root.
 * @throws ScmException for a generic indication of failure while deleting the file.
 */
---
  public void delete (String file) throws ScmException;

---
/**
 * Computes and returns the differences of a file between HEAD and a given revision.
 * This call equals to <code>diff (file, file, revision, "HEAD")</code>.
 * @param file The path to the file to compute the diff for. Relative to the working copy's root.
 * @param revision The revision to base the diff on.
 * @return The differences between the current and the given revision.
 * @throws ScmException for a generic indication of failure while computing the differences.
 */
---
  public String diff (String file, String revision) throws ScmException;

---
/**
 * Computes and returns the differences between two files with their respective revisions.
 * @param oldFile The path to the file to base the diff on.
 * @param newFile The path to the file to calculate the differences for.
 * @param oldRevision oldFile's revision.
 * @param newRevision newFile's revision.
 * @return The differences between oldFile@oldRevision and newFile@newRevision.
 * @throws ScmException for a generic indication of failure while calculating the differences
 */
---
  public String diff (String oldFile, String newFile, String oldRevision, String newRevision) throws ScmException;

---
/**
 * Collects and returns commit messages for all given files in all given revisions.
 * Depending on the underlying implementation this call may, for non-existent files or revisions, return null-values respectively or throw an ScmException.
 * @param files The paths to the files for which the commit messages shall be collected. The files are considered to be relative to the working copy's root.
 * @param revisions The revisions for which the commit messages shall be collected.
 * @return The commit messages for every file in every revision. The first index describes the file, while the second describes the revision. For example logs[2][0] contains the commit messages for the the third file in the first revision.
 * @throws ScmException for a generic indication of failure while collecting the commit messages.
 */
---
  public String[][] log (String[] files, String[] revisions) throws ScmException;

---
/**
 * Commits all changes within the working copy and submits them to the remote repository.
 * @param author The author's name or id
 * @param message The author's commit message
 * @return A summary of changes and conflicts.
 * @throws ScmException for a generic indication of failure while committing.
 */
---
  public MergeResult commit (String author, String message) throws ScmException;

---
/**
 * Commits all changes within subPath and submits them to the remote repository.
 * @param author The author's name or id
 * @param message The author's commit message
 * @param subPath The path to the file/directory that is supposed to be committed. Relative to the working copy's root.
 * @return A summary of changes and conflicts.
 * @throws ScmException for a generic indication of failure while committing.
 */
---
  public MergeResult commit (String author, String message, String subPath) throws ScmException;
  
---
/**
 * Commits all changes within the working copy and submits them to the remote repository.
 * @param author The author's name or id
 * @param message The author's commit message
 * @throws ScmException for a generic indication of failure while committing.
 */
---
  public void commitAsynchronous (String author, String message) throws ScmException;

---
/**
 * Commits all changes within subPath and submits them to the remote repository.
 * @param author The author's name or id
 * @param message The author's commit message
 * @param subPath The path to the file/directory that is supposed to be committed. Relative to the working copy's root.
 * @throws ScmException for a generic indication of failure while committing.
 */
---
  public void commitAsynchronous (String author, String message, String subPath) throws ScmException;

---
/**
 * Creates a new branch. A strategy to store the branches and remember their names will have to be implemented in respect to the underlying SCM-implementation.
 * @param branchName The branche's name
 * @throws ScmException for a generic indication of failure while branching.
 */
---
  public void branch (String branchName) throws ScmException;

---
/**
 * Lists all branches' names created so far.
 * @return A list of all created branches.
 * @throws ScmException for a generic indication of failure while listing the branches
 */
---
  public String[] listBranches() throws ScmException;

---
/**
 * Merges the current working copy with a branch.
 * @param branchName The branch's name that shall be used for merging. the names that may be used here are the same names that were used in branch (String branchName) and are supplied by listBranches().
 * @return A summary of changes and conflicts.
 * @throws BranchNotFoundException if the branchName is unknown, i.e. the branch was not created yet.
 * @throws ScmException for a generic indication of failure while merging.
 */
---
  public MergeResult merge (String branchName) throws BranchNotFoundException, ScmException;

---
/**
 * Exports the whole working copy, i.e. copies everything (recursively) within it "as is" without SCM-metadata.
 * @param exportDestinationPath The path to copy the working copy to.
 * @throws ScmException for a generic indication of failure while exporting.
 */
---
  public void export (String exportDestinationPath) throws ScmException;

---
/**
 * Imports external files (recursively) to the working copy, i.e. copies them to the specified location within the working copy and applies SCM-metadata to them. 
 * @param importSourcePath The path where the data to import is located.
 * @param importDestinationPath The path where to import the data to. Relative to the working copy's root.
 * @throws ScmException for a generic indication of failure while importing.
 */
---
  public void importTree (String importSourcePath, String importDestinationPath) throws ScmException;

---
/**
 * Changes the remote repository which the current working-copy is bound to.
 * @param newRepository The new repository's URI
 * @throws ScmException for a generic indication of failure while switching.
 */
---
  public void switchRepository (URI newRepository) throws ScmException;

---
/**
 * Switch to another branch.
 * @param branchName The branch's name that shall be used for merging. the names that may be used here are the same names that were used in branch (String branchName) and are supplied by listBranches().
 * @throws BranchNotFoundException if the branchName is unknown, i.e. the branch was not created yet.
 * @throws ScmException for a generic indication of faulure while switching.
 */
---
  public void switchBranch (String branchName) throws BranchNotFoundException, ScmException;

---
/**
 * Performs an update on the working-copy's root, i.e. fetches changes from the remote repository and applies them to the working copy.
 * @return A summary of changes and conflicts.
 * @throws ScmException for a generic indication of failure while updating
 */
---
  public MergeResult update() throws ScmException;

---
/**
 * Performs an update on updatePath, i.e. fetches changes from the remote repository and applies them to the working copy.
 * @param updatePath The path to perform the update to. Relative to the working-copy's root.
 * @return A summary of changes and conflicts, supplied by the underlying SCM-platform.
 * @throws ScmException for a generic indication of failure while updating.
 */
---
  public MergeResult update (String updatePath) throws ScmException;
  
---
/**
 * Performs an update on the working-copy's root, i.e. fetches changes from the remote repository and applies them to the working copy.
 * @throws ScmException for a generic indication of failure while updating
 */
---
  public void updateAsynchronous() throws ScmException;

---
/**
 * Performs an update on updatePath, i.e. fetches changes from the remote repository and applies them to the working copy.
 * @param updatePath The path to perform the update to. Relative to the working-copy's root.
 * @throws ScmException for a generic indication of failure while updating.
 */
---
  public void updateAsynchronous (String updatePath) throws ScmException;
  
  

* Datatypes

  The Exceptions are standard checked Exceptions with no additional functionality. This leaves MergeResult as only custom datatype:

---
public abstract class MergeResult
{
	private String		stringResult; // The result as provided by the underlying SCM-implementation.
	private String[]	conflicts; // All paths to the files in conflict. Relative to the working copy's root.
	private String[]	merges; // All paths to the files that were merged.
	private String[]	updates; // All paths to the files that were updated.
	private String[]	adds; // All paths to the files that were added.
	private String[]	deletions; // All pats to the files that were deleted.
	
	/* appropriate getters and setters */
}
---


* Events

---
CheckoutEvent
{
	private String 		author;	// the Author who performed the checkout
	private MergeResult	result;	// the result
}
---
  To be triggered on all checkout-calls, whether synchronous or asynchronous.

---
CommitEvent
{
	private String 		author;	// the Author who performed the checkout
	private MergeResult	result;	// the result
}
---
  To be triggered on all commit-calls, whether synchronous or asynchronous.

---
UpdateEvent
{
	private MergeResult	result;	// the result
}
---
  To be triggered on all asynchronous update-calls.