~~
~~  Copyright 2010 OpenEngSB Division, Vienna University of Technology
~~
~~   Licensed under the Apache License, Version 2.0 (the "License");
~~   you may not use this file except in compliance with the License.
~~   You may obtain a copy of the License at
~~
~~       http://www.apache.org/licenses/LICENSE-2.0
~~
~~   Unless required by applicable law or agreed to in writing, software
~~   distributed under the License is distributed on an "AS IS" BASIS,
~~   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~   See the License for the specific language governing permissions and
~~   limitations under the License.
~~
Usage

  First of all this chapter explains only the VERY basics of git and only that parts directly relevant for the
 development, but not the entire idea and possibilities with git. PLEASE read a lot of tutorials first to get
 how to work with git and see this chapter more as an summary!
 
Remarks

  For mac and for windows there are specific implementations of GIT. Don't use them! They do not work for what
 we like to do with them. If you're using linux no problems at all are expected. If you're using any other platform
 use cygwin or compile the original source with ssh support! 
 
Starting up and configure

  Before starting to work with git some settings should be applied to git. Therefore simply execute the following
 commands one after the other in a shell.

  Of course not all of the settings are REALLY required, but others are, so please simply execute all of them!
  
  [[1]] git config --global user.name "FirstName LastName"
  
  [[2]] git config --global user.email "user@example.com"
  
  [[3]] git config --global color.ui "auto"
  
  [[4]] git config --global pack.threads "0"
  
  [[5]] git config --global diff.renamelimit "0"
  
  [[6]] git config --global core.autocrlf "input"
  
Getting the repository

  The git repositories could be checked out in two different permission levels. Read or write. The following two
 subsections explain how to get the code.

Readonly

  For a readonly access to the git repos simply clone the repository
  
+--------------+
git clone git://host/REPO (e.g. git clone git://github.com/openengsb/openengsb.git)
+--------------+

Write

  To get write access to the repositries an additional step is required. First of all you have to create an
 ssh-key (in cygwin on windows! Otherwise simply in the bash).
 
+-------------+
ssh-keygen
+-------------+

  Simply answer all questions from the application with return without enter any values. Afterwards the id_rsa.pub
 file from your ~/.ssh/ folder should be submitted to github. ***Workflow with GIT

  To understand the workflow you have to have a basic understanding of git. Nevertheless the approach will also
 work with "pattern matching".
 
+-------------+
[1. create working feature; if not exists; WORKING = name of the feature; e.g. info]
git checkout -b WORKING master
git push origin WORKING
git checkout master
git branch -D WORKING
git checkout -b WORKING origin/WORKING
git checkout -b devWORKING WORKING
[2. producing context]
git checkout -b devWORKING
HACK HACK HACK
git add FILES
git rm FILES
git commit -s
[3. push changes or continue with 2.]
git checkout WORKING
git pull
git rebase WORKING devWORKING
git checkout WORKING
git merge devWORKING
// test if everything still works...
git push
[4. feature completed and merged by an admin to the master; or go back to 2.]
git push origin :WORKING
git checkout master
git branch -D devWORKING
git branch -D WORKING
[5. go back to 1. and create new feature branch]
+-------------+ 

Workflow

Initial setup:

* create a fork on github
* clone the original repo:
$ git clone git@github.com/openengsb/openengsb
* add your fork as remote
$ git remote add <username> git@github.com/<username>/openengsb
Example:
$ git remote add ChristophGr git@github.com/ChristophGr/openengsb

To start some new feature:
* be sure your master is up-to-date
$ git checkout master
$ git pull origin master

* then create a new devbranch
$ git checkout -b newfeature

* and start committing to your local branch.

* To publish the branch on github do:
$ git push <username> newfeature

// TODO implement rule 5
-----------------------------------------
* If the development in the branch takes some time, it may happen, that the master-branch changes in a way that affects your featurebranch.
To check how your branch behaves on the current master you can merge the changes into your devbranch.

$ git checkout newfeature
$ git merge --no-commit --no-ff master

If it does not affect your development in any way, do not commit the merge, but rather undo it.
$ git reset --hard

If it does affect your development, you need to commit the merge.
If the merge breaks something in your dev-branch, fix all issues before commiting the merge.
When done fixing potential issues do
$ git commit
------------------------------------------- // rule 5?


If your feature ready to be merged to master:

$ git checkout master
$ git merge --no-ff --no-commit <username>/newfeature # we use the remote name here

If some issues arised due to the merge, fix them now (before committing). When you're done do
$ git commit



## Rules

1) All development is done in forks (also of the core developers)

2) Rebase is NOT dead (although we use merges). NEVER EVER commit local
merges. You still have to develop in local dev branches and rebasing them
with the upstream branches. Only if nobody else has access to your fork you
can be sure that nobody changed it on the way!

3) Merges to the master have to be done from the upstream branches not the
local ones! This means if you want to merge the branch test from the fork
eyeball into the master do NOT use

$ git checkout test eyeball/test
$ git checkout master
$ git merge test

BUT rather
$ git checkout master
$ git merge eyeball/test

This will create much better readable merge nodes.

4) if merging branches from forked repositories ALWAYS use the --no-ff option
for merges; this will always create a merge node (even if a fast-forward
merge is possible). This is required to create a clear and consistent
history!

5) Avoid backward merges from the master and keep feature branches small!
Merging the master backward into the feature branches creates A LOT of merge
nodes and a mess in the visualisations of the branches! But this also
requires to keep the features small! Create features which can be handled in
2 to three days;

?????????????????
If the feature branch is than not merged into the master
(because review is required or something else) you can create a new branch
from the latest master and merge your feature branch into this one; Although
this may create many branches the number of merge nodes backward from the
master will keep small.
???????????????????

6) use MEANINGFUL feature branch names. Using the merge history in the master
you can easily follow the development of features. But this requires (maybe
long) good names! Having 7 twitter or test branches merged helps absolutely
nothing and will only create a mess!

7) Keep your forks clean; although git can handle thousands of branches in
thousands of forks we (as commiter) cant. Having all the forks as remote
repositories makes it really hard for us to handle all the branches in all
the forks. Therefore please remove ALL branches already merged or not
required. Also remove your forked master and the already existing branches.
You can remove your local master by changing in the admin page of your fork
the default branch to your current branch; if master is no longer the
default branch you can kick it. Additionally its nevertheless better to use
the remote master instead of your forked to kick off your dev branches...

