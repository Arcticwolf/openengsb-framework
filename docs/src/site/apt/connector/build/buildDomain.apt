~~
~~	Copyright 2009 OpenEngSB Division, Vienna University of Technology
~~
~~   Licensed under the Apache License, Version 2.0 (the "License");
~~   you may not use this file except in compliance with the License.
~~   You may obtain a copy of the License at
~~
~~       http://www.apache.org/licenses/LICENSE-2.0
~~
~~   Unless required by applicable law or agreed to in writing, software
~~   distributed under the License is distributed on an "AS IS" BASIS,
~~   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~   See the License for the specific language governing permissions and
~~   limitations under the License.
~~
  [ATTENTION:] This page is only a proposal! This means that everyone is allowed to edit this page and it is 
  			   marked for change. This proposal could be seen as design idea and should be discussed in public
  			   and visible for everyone before implemented at all.

Build Domain

  The Build Domain has to activate the build process of the tool that is able to build that. There are some different tools to build a project like Ant, Maven, Make or Gradle.


{History}

   In the past a single file was used to produce a program. In process of time make, an unix product was developed for automatically building.\
Files called makefiles specify how to derive the target program from each of its dependencies. Make can decide where to start through topological sorting. Though Integrated Development Environments and language-specific compiler features can also be used to manage the build process in modern systems, make remains widely used, especially in Unix-based platforms.	
The non-intuitive syntax of make discourage most of the users. Make has some problem is its first years, because of the syntax and of configuration the dependencies and platforms. Today there are tools like CMake and AutoConf to manage these problems.\
\
  In 2000 Ant was the solution for hard syntax. Ant uses an XML specification packed up in a single file, so called build.xml.
Ant subdivides the main build in several targets, that can have dependencies to other targets. Targets are also subdivided in Tasks, there are single instructions defined like run tests.
In 2005 another tools was developed, Maven. This Build tool describes the project with fixed conventions regarding to project structure. 
Maven uses modules to manage subprojects or dependencies. \
\
  In addition Ivy was born in 2005, which is using Ant with Dependency Management. Therefore repositories are used to copy the depended libraries to the lib-folder. 
The last build tool was developed in 2008 and is called Gradle, which also uses Tasks like Ant. For the dependencies Ivy organizes the tasks. 
The concept of modules and subprojects from Maven is integrated in Gradle and also Groovy Tasks could be used to implement features. Groovy is a similar programming language to Java, and also creates .class files, that Java can use.	


{Build Tools}

  * Shell Scripts
  
  * Make
  
  * Ant
  
  * Maven
  
  * Ivy
  
  * Gradle
  
  []
  
  
  The focus lies on Ant and Maven, because these are the most used tools for developing software today and Ivy and Gradle are derivatives of them and not actually sophisticated.
	
{Make}
  
  Not everybody is familiar with Make, so I describe an short example from Wikipedia.
  
  Below is a very simple makefile that would compile a source called "helloworld.c" using cc, a C compiler. The PHONY tag is a technicality that tells make that a particular target name does not produce an actual file. \
  The $@ and $\< are two of the so-called internal macros and stand for the target name and "implicit" source, respectively. There are a number of other internal macros.[7][8]

+-------------------------+
helloworld: helloworld.o
	cc -o $@ $<
 
helloworld.o: helloworld.c
	cc -c -o $@ $<
 
.PHONY: clean
 
clean:
	rm -f helloworld helloworld.o
+-------------------------+
  
{{Make Problems}}

  * Platform depended configuration: Its necessary to define the platform.
  
  * Dependencies has to be defined first
  
  * Timing Problem: If the source changes during a running build, this build will fail, because of the comparing file modification times. An synchronization is necessary.
  
  []


{Differences / Common Sense}
  
  The power of Ant lies in the copy-paste structure or to set references for the tasks. Also the management of the dependencies between the targets plays an important role.
To run an Ant Build, its necessary to know how the target is called, that manage the build. In Ant you can define the name of the target as you want.\ 

  Maven uses conventions to organize the lifecycle and the automatically building. Its easier to learn because of its structure and the powerful dependency management with repositories.
Because of the differences between the lifecycles(could be defined in Ant with depended targets), the lifecycle will be only a concept. For example, you cannot run a test before a compilation. 
The lifecycle should be as dynamic as possible, but a default implementation like Maven has designed is also necessary. \

  Ivy also provides the artifacts in a repository like Maven, and so also Gradle provides these feature. These tools also provides to separate the project in subproject and modules. \

  The comparison of the Build Tools show that there are a lot of differences between the tool options. Only few options have the same functionality like the configuration of the output or setting properties. 
But the important things is, that every build tool needs a build file, which show the configuration of the build. \

  The standard entry for commands is the same, you have to decide the goal resp. the targets for the build. 
Maven provides three different goal to support a build process: compile, package, install. Although the compile goal is not a full build process, only a big part.
If you use Ant, you have to define the targets that you want to use. \


*---+---+---+---+---*---+---+---+---+---*---+
|Feature|Maven|Ant|Gradle|Make|Meaning|Maven|Ant|Gradle|Make|Comments|
*---+---+---+---+---*---+---+---+---+---*---+
|--file|-f|-buildfile, -file, -f|--build-file, -b|--file, -f|Use an alternate build file|+|+|+|+| |
*---+---+---+---+---*---+---+---+---+---*---+
|--version|-v|-version|-v|-v|Display version informations|+|+|+|+| |
*---+---+---+---+---*---+---+---+---+---*---+
|--debug|-X|-d|--debug, -d|-d|Produce execution debug output|+|+|+|o| |
*---+---+---+---+---*---+---+---+---+---*---+
|--help|-h|-h|-?| |Display help information|+|+|+|-| |	
*---+---+---+---+---*---+---+---+---+---*---+
|--fail-at-end|-fae|-keep going, -k| |--keep_going, -k|Only fail the build afterwards: allow all non-impacted builds to continue|+|+|-|+| |
*---+---+---+---+---*---+---+---+---+---*---+
|--quiet|-q|-q| |--quiet, -s|Quiet output - only show errors|+|+|-|+| |
*---+---+---+---+---*---+---+---+---+---*---+
|--define|-D|-D <property><value>|-D, --system-prop| |Define a system property|+|o|+|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--errors|-e| |-s| |Produce execution error messages|+|-|o|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--settings|-s| |--settings-file, -c| |Alternate path for the user settings file|+|-|o|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--activate-profiles|-P| | | |Activate Profiles|+|-|-|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--batch-mode|-B|-noinput| | |Run in non-interacitve Batch mode|+|o|-|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--check-plugin-updates|-cpu| | | |Force uptoDate check for plugins|+|-|-|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--fail-fast|-ff| | | |Stop at first failure in reactorized builds|+|-|-|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--fail-never|-fn| | | |Fail the build, regardless of project result|+|-|-|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--lax-checksum|-c| | | |warn if checksum don't match|+|-|-|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--non-recursive|-N| | | |Do not recurse into subprojects|+|-|-|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--no-plugin-registry|-npr| | | |Do not use .m2/plugin-registry.xml for plugins|+|-|-|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--no-plugin-updates|-npu| | | |Suppress the uptoDate check for plugins|+|-|-|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--offline|-o| | | |Work offline|+|-|-|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--reactor|-r| | | |Execute goals in the reactor|+|-|-|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--strict-checksum|-C| | | |Fail the build if checksum don't match|+|-|-|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--update-plugins|-up | | | |Update plugins|+|-|-|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--update-snapshots|-U| | | |Update snapshots|+|-|-|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|-verbose| |-v|--full-stacktrace, -f| |Extra verbose comments|-|+|+|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|-autoproxy| | | | |Java 1.5: Use the os proxy settings|-|+|-|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|-diagnostics| | | | |Print information that might be helpful to diagnose or report problems|-|+|-|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|-emacs| |-e| | |Produce logging information without adornments|-|+|-|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|-find <file>| |-s <file>| | |Search for the buildfile towards the root of the filesystem and use it|-|+|-|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|-inputhandler <class>| | | | |Class which will handle input requests|-|+|-|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|-lib <path>| | | | |Specifices the path to the depended jars and classes|-|+|-|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|-listener <classname>| | | | |Add an instance of class as a project listener|-|+|-|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|-logfile <file>| |-l| | |Specifices the log file|-|+|-|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|-logger <classname>| | | | |The class which perform logging|-|+|-|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|-main| | | | |Override Ant's normal entry point|-|+|-|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|-nice number| | | | |A niceness value for  the main thread; 1 to 10, 5 default|-|+|-|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|-noclasspath| | | | |Run ant without using CLASSPATH|-|+|-|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|-nouserlib| | | | |Run ant without using the jar files from ${user.home}/.ant/lib|-|+|-|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|-projecthelp| |-p| | |Print project help information|-|+|-|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|-propertyfile <name>| | | | |Load all properties from the file like with -D|-|+|-|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--cache| | |-C| |Specifies how compiled build scripts should be cached; Possible values are: rebuild, off, on; default: on|-|-|+|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--default-import-file| | |-K| |Specifices the default import file|-|-|+|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--dependencies| | |-n| |Show list of all dependencies|-|-|+|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--dep-tasks| | |-A| |Specifies additional tasks for building project dependencies|-|-|+|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--dry-run| | |-m|--just-print, --dry-run, -n|Runs the builds with all task actions disabled|-|-|+|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--embedded| | |-e| |Specify an embedded build script|-|-|+|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--gradle-user-home| | |-g| |Specifies the gradle user home directory|-|-|+|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--info| | |-i| |Set log level to info|-|-|+|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--no-imports| | |-I| |Disable usage of default import file for build script file|-|-|+|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--no-opt| | |-o| |Ignore task optimization|-|-|+|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--no-rebuild| | |-a| |Don't rebuild dependencies|-|-|+|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--no-search-upward| | |-u| |Don't search in parent folders for a settings.gradle file|-|-|+|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--plugin-properties-file| | |-l| |Specifes the plugin.properties file|-|-|+|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--project-dir| | |-p| |Specifices the start directory for gradle. Default:current|-|-|+|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--project-prop| | |-P| |Set a project property like a system property|-|-|+|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--properties| | |-r| |Show list of all properties available|-|-|+|-| |
*---+---+---+---+---*---+---+---+---+---*---+
|--check-symlink-times| | | |-L|Use the latest mtime between symlinks and target.|-|-|-|+| |
*---+---+---+---+---*---+---+---+---+---*---+
|--directory| | | |-C|	Change to directory dir before reading the makefiles or doing anything else.|-|-|-|+| |
*---+---+---+---+---*---+---+---+---+---*---+
|--environment-overrides| | | |-e|Give variables taken from the environment precedence over variables from makefiles.|-|-|-|+| |
*---+---+---+---+---*---+---+---+---+---*---+
|--include-dir| | | |-I|Specifices the directory to search for included makefiles|-|-|-|+| |
*---+---+---+---+---*---+---+---+---+---*---+
|--jobs| | | |-j|Specifies the number of jobs to run simultaneously|-|-|-|+| |
*---+---+---+---+---*---+---+---+---+---*---+
|--load-average| | | |-l|Specifies that no new jobs (commands) should be started if there are others jobs running and the load average is at least load (a floating-point number). With no argument, removes a previous load limit|-|-|-|+| |
*---+---+---+---+---*---+---+---+---+---*---+
|--no-builtin-rules| | | |-r|Eliminate use of the built-in implicit rules|-|-|-|+| |
*---+---+---+---+---*---+---+---+---+---*---+
|--no-builtin-variables| | | |-R|Don't define any built-in variables.|-|-|-|+| |
*---+---+---+---+---*---+---+---+---+---*---+
|--no-keep-going| | | |-S|Cancel the effect of the -k option.	|-|-|-|+| |
*---+---+---+---+---*---+---+---+---+---*---+
|--no-print-directory| | | | |Cancel the effect of the -w option.|-|-|-|+| |
*---+---+---+---+---*---+---+---+---+---*---+
|--old-file| | | |-o|Do not remake the file file even if it is older than its dependencies, and do not remake anything on account of changes in file. Essentially the file is treated as very old and its rules are ignored|-|-|-|+| |
*---+---+---+---+---*---+---+---+---+---*---+
|--print-data-base| | | |-p|Print the data base (rules and variable values) that results from reading the makefiles|-|-|-|+| |
*---+---+---+---+---*---+---+---+---+---*---+
|--print-directory| | | |-w|Print a message containing the working directory before and after other processing|-|-|-|+| |
*---+---+---+---+---*---+---+---+---+---*---+
|--question| | | |-q|''Question mode''. Do not run any commands, or print anything; just return an exit status that is zero if the specified targets are already up to date, nonzero otherwise|-|-|-|+| |
*---+---+---+---+---*---+---+---+---+---*---+
|--touch| | | |-t|Comparable with cpu, npu from Maven(only plugin)|-|-|-|+| |
*---+---+---+---+---*---+---+---+---+---*---+
|--warn-undefined-variables| | | | |Warn when an undefined variable is referenced.|-|-|-|+| |
*---+---+---+---+---*---+---+---+---+---*---+
|--what-if, --new-file| | | |-W|Pretend that the target file has just been modified.|-|-|-|+| |
*---+---+---+---+---*---+---+---+---+---*---+


{Interface}

{{Requierements}}

  * the baseDirectory of the sources
  
  * a buildFile, that configurates the build
  
  * artifact repository - Maven and Ant uses diffrent technologies
  
  []
  
{{Exceptions}}

  * a generic exception - BuildException - should isolate the build exceptions from other domain exceptions
  
  * underlying exceptions serve to coordinate the domain specific exceptions - CommandlineBuildException, LoggingBuildException 
  
  []
  
{{Events}} 

  * The events are shown in the interface and have speeking names, when the were active.
  
  []
  
---
public interface Build 
	
	/**
	 * Sets the BuildNumber for the build after the build was started
	 * @param buildnumber - serial number
	 * @throws BuildException
	 */
	public void setBuildNumber(BuildNumber buildnumber) throws BuildException;
	
	/**
	 * Sets the LogLevel, which is set for the build process
	 * @param loglevel - possible options are info, warn, debug, error or verbose
	 * @throws BuildException
	 */
	public void setLogLevel(LogLevel loglevel) throws BuildException;
	
	/**
	 * supplies the actual LogLevel
	 * @return LogLevel
	 * @throws BuildException
	 */
	public LogLevel getLogLevel() throws BuildException;
	
	/**
	 * Sets the parameters, which were defined 
	 * For example, system properties could be set
	 * @param options
	 * @throws BuildException
	 */
	public void setOptions(Options options) throws BuildException;
	
	/**
	 * supplies the used options of the build process
	 * @return the options set by the definition of the build process
	 * @throws BuildException
	 */
	public Options getOptions() throws BuildException;
	
	/**
	 * Executes the tool which is selected 
	 * @param object this object represents the Object which is needed from the special tool to run it
	 * @throws BuildException
	 */
	public void execute(Object object) throws BuildException;	

	/*
	 * Events
	 */
	
	/**
	 * checks, if the build was started
	 * @return true if the build was started, else false
	 * @throws BuildException
	 */
	public boolean buildStarted() throws BuildException;
	
	/**
	 * supplies the start time of the time
	 * @return start time as Date
	 * @throws BuildException
	 */
	public Date buildStartTime() throws BuildException;
	
	/**
	 * checks, if the build was started
	 * @return true if the build was started, else false
	 * @throws BuildException
	 */
	public boolean settingsDefined() throws BuildException;
	
	/**
	 * checks, if the build was started
	 * @return true if the build was started, else false
	 * @throws BuildException
	 */
	public boolean testsIncluded() throws BuildException;
	
	/**
	 * checks, if the build was finished
	 * @return true if the build was started, else false
	 * @throws BuildException
	 */
	public boolean buildFinished() throws BuildException;
	
	/**
	 * supplies the end time of the time
	 * @return end time as Date
	 * @throws BuildException
	 */
	public Date buildEndTime() throws BuildException;
	
	/**
	 * show the result object from the used tool if it was successful
	 * @return the Project Object of the used tool
	 * @throws BuildException
	 */
	public Object buildSuccessful() throws BuildException;
	
	/**
	 * show the result object from the used tool if a failure occurs
	 * @return the Project Object of the used tool
	 * @throws BuildException
	 */
	public Object buildFailure() throws BuildException;
---

{Interface for the Options}

  The Options could be extend every time, if it is necessary. It should describe at first the main options.
  
---

public interface Options 

	/**
	 * sets the file for the build process
	 * @param buildFile - File with path
	 * @throws CommandlineBuildException
	 */
	public void setBuildfile(File buildFile) throws CommandlineBuildException;
	
	/**
	 * supplies the build file 
	 * @return the build file
	 * @throws CommandlineBuildException
	 */
	public File getBuildfile() throws CommandlineBuildException;
	
	/**
	 * sets the file for the settings
	 * @param settings - File with path
	 * @throws CommandlineBuildException
	 */
	public void setSettings(File settings) throws CommandlineBuildException;
	
	/**
	 * supplies the settings file
	 * @return the settings file
	 * @throws CommandlineBuildException
	 */
	public File getSettings() throws CommandlineBuildException;
	
	/**
	 * sets the base directory
	 * @param directory as a File Object
	 * @throws CommandlineBuildException
	 */
	public void setBaseDirectory(File directory) throws CommandlineBuildException;
	
	/**
	 * supplies the directory
	 * @return the directory
	 * @throws CommandlineBuildException
	 */
	public File getBaseDirectory() throws CommandlineBuildException;

	/**
	 * activate a profile
	 * @param profile - name of the profile
	 * @throws CommandlineBuildException
	 */
	public void activateProfile(String profile) throws CommandlineBuildException;
	
	/**
	 * supplies the activated profile or null, if no profile was set
	 * @return the activated profile or null
	 * @throws CommandlineBuildException
	 */
	public String getActivatedProfile() throws CommandlineBuildException;
	
	/**
	 * define a property
	 * @param property - name of the property
	 * @param value - value of the property
	 * @throws CommandlineBuildException
	 */
	public void defineProperty(String property, String value) throws CommandlineBuildException;
	
	/**
	 * supplies the properties
	 * @return a Properties Object
	 * @throws CommandlineBuildException
	 */
	public Properties getProperties() throws CommandlineBuildException;
	

---

{Interface for the LogLevel}

---
public interface LogLevel
	
	public final String WARN = "Warn";
	public final String INFO = "Info";
	public final String ERROR = "Error";
	public final String DEBUG = "Debug";
	public final String VERBOSE = "Verbose";
	public final String QUIET = "Quiet";
	
	
	/**
	 * actual value of the log level
	 */
	public String ACTUALLEVEL = "";
	
	/**
	 * check it the log level is set on the warn level
	 * @return true it the log level is set on the warn level, else false
	 * @throws BuildException
	 */
	public boolean isWarnEnabled() throws BuildException; 
	
	/**
	 * check it the log level is set on the info level
	 * @return true it the log level is set on the info level, else false
	 * @throws BuildException
	 */
	public boolean isInfoEnabled() throws BuildException; 
	
	/**
	 * check it the log level is set on the error level
	 * @return true it the log level is set on the error level, else false
	 * @throws BuildException
	 */
	public boolean isErrorEnabled() throws BuildException;
	
	/**
	 * check it the log level is set on the debug level
	 * @return true it the log level is set on the debug level, else false
	 * @throws BuildException
	 */
	public boolean isDebugEnabled() throws BuildException;
	
	/**
	 * check it the log level is set on the verbose level
	 * @return true it the log level is set on the verbose level, else false
	 * @throws BuildException
	 */
	public boolean isVerboseEnabled() throws BuildException;
	
	/**
	 * check it the log level is set on the quiet level
	 * @return true it the log level is set on the quiet level, else false
	 * @throws BuildException
	 */
	public boolean isQuietEnabled() throws BuildException;

---

{Class for the Build Number}

  Generate the Build Number
  
---
public class BuildNumber 
\{
	private Long buildnumber;
	
	/**
	 * Generates a new BuildNumber for a project
	 * serial number, ascending
	 */
	public void generateBuildNumber() \{
		
	\}
	
	/**
	 * supplies the last generated BuildNumber
	 * @return
	 */
	public Long getBuildNumber() \{
		return this.buildnumber;
	\}
\}
---


{Implementation}

  The Builders should be separated, because they are too different from each other. Only few things are needed in the same way.
In the first session, the build domain will integrate Ant and Maven.