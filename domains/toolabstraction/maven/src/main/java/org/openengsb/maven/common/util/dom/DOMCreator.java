/**

   Copyright 2010 OpenEngSB Division, Vienna University of Technology

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
   
 */

package org.openengsb.maven.common.util.dom;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

/**
 * Helper Class to build a DOM of the pom.xml to manipulate or create the
 * maven-surefire-plugin
 * 
 * A validation of possible parameters from surefire plugin from the version
 * 2.4.3 is integrated in the source.
 * 
 */
public class DOMCreator {

    private Document document;
    private Node projectNode;
    private Node buildNode;
    private Node pluginsNode;
    private Node surefirePluginNode;
    private Node configuration;

    public List<String> allowedParameters = Arrays.asList(new String[] { "additionalClasspathElements",
            "additionalClasspathElement", "argLine", "basedir", "baseDir", "childDelegation", "classesDirectory",
            "debugForkedProcess", "disableXmlReport", "enableAssertions", "environmentVariables", "excludedGroups",
            "excludes", "exclude", "failIfNoTests", "forkMode", "forkedProcessTimeoutInSeconds", "groups", "includes",
            "include", "junitArtifactName", "jvm", "parallel", "printSummary", "properties",
            "redirectTestOutputToFile", "remoteRepositories", "reportFormat", "reportsDirectory", "skip", "skipExec",
            "skipTests", "suiteXmlFiles", "systemProperties", "test", "testClassesDirectory", "testFailureIgnore",
            "testNGArtifactName", "testSourceDirectory", "threadCount", "trimStackTrace", "useFile",
            "useManifestOnlyJar", "useSystemClassLoader", "workingDirectory" });

    /**
     * Returns the document of the DOM
     * 
     * @return document
     */
    public Document getDocument() {
        return this.document;
    }

    /**
     * Sets the document of the DOM
     * 
     * @param document
     */
    public void setDocumet(Document document) {
        this.document = document;
    }

    /**
     * Reads the pom.xml and creates the document
     * 
     * @param xml - pom.xml as File Object
     * @throws Exception
     */
    public void readDOM(File xml) throws Exception {
        this.document = null;
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setNamespaceAware(true);
            DocumentBuilder builder = factory.newDocumentBuilder();
            this.document = builder.parse(xml);
        } catch (SAXParseException spe) {
            // Error generated by the parser
            System.out.println("\n** Parsing error" + ", line " + spe.getLineNumber() + ", uri " + spe.getSystemId());
            System.out.println("   " + spe.getMessage());

            // Use the contained exception, if any
            Exception x = spe;

            if (spe.getException() != null) {
                x = spe.getException();
            }

            x.printStackTrace();
        } catch (SAXException sxe) {
            // Error generated during parsing)
            Exception x = sxe;

            if (sxe.getException() != null) {
                x = sxe.getException();
            }

            x.printStackTrace();
        } catch (ParserConfigurationException pce) {
            // Parser with specified options can't be built
            pce.printStackTrace();
        } catch (IOException ioe) {
            // I/O error
            ioe.printStackTrace();
        }
    }

    /**
     * Generates a XML File from the DOMSource
     * 
     * @param document - the modified document
     * @param file - the output file
     * @throws Exception
     */
    public void writeInXMLFile(Document document, File file) throws Exception {
        TransformerFactory tFactory = TransformerFactory.newInstance();
        Transformer transformer = tFactory.newTransformer();

        DOMSource source = new DOMSource(document);
        StreamResult result = new StreamResult(file);
        transformer.transform(source, result);
    }

    /**
     * Recursive Method to find the surefire plugin node
     * 
     * @param node - actual node
     * @param document - root document
     * @throws Exception
     */
    public void findSurefirePlugin(Node node, Document document) throws Exception {
        NodeList nodes = node.getChildNodes();

        for (int i = 0; i < nodes.getLength(); i++) {
            Node nd = nodes.item(i);

            if (nd.getNodeType() == Node.ELEMENT_NODE && nd.getNodeName().equals("plugin")) {
                Node groupId = nd.getFirstChild().getNextSibling();
                Node artifactId = nd.getFirstChild().getNextSibling().getNextSibling().getNextSibling();

                if (groupId.getTextContent().equals("org.apache.maven.plugins")
                        && artifactId.getTextContent().equals("maven-surefire-plugin")) {
                    this.surefirePluginNode = nd;

                    findNodeConfiguration(nd, document);
                }
            }

            if (nd.hasChildNodes()) {
                Node attr = nodes.item(i);
                findSurefirePlugin(attr, document); // recursion
            }
        }
    }

    /**
     * Recursive Method to find the configuration node
     * 
     * @param node - actual node
     * @param document - root document
     * @throws Exception
     */
    public void findNodeConfiguration(Node node, Document document) {
        NodeList nodes = node.getChildNodes();

        for (int i = 0; i < nodes.getLength(); i++) {
            Node nd = nodes.item(i);

            if (nd.getNodeType() == Node.ELEMENT_NODE && nd.getNodeName().equals("configuration")) {
                this.configuration = nd;
            }

            if (nd.hasChildNodes()) {
                Node attr = nodes.item(i);
                findNodeConfiguration(attr, document); // recursion
            }
        }
    }

    /**
     * Recursive Method to find the plugins node
     * 
     * @param node - actual node
     * @param document - root document
     * @throws Exception
     */
    public void findPluginsNode(Node node, Document document) throws Exception {

        NodeList nodes = node.getChildNodes();

        for (int i = 0; i < nodes.getLength(); i++) {
            Node nd = nodes.item(i);

            if (nd.getNodeType() == Node.ELEMENT_NODE && nd.getNodeName().equals("plugins")) {
                this.pluginsNode = nd;
            }

            if (nd.hasChildNodes()) {
                Node attr = nodes.item(i);
                findPluginsNode(attr, document); // recursion
            }
        }
    }

    /**
     * Recursive Method to find the build node
     * 
     * @param node - actual node
     * @param document - root document
     * @throws Exception
     */
    public void findBuildNode(Node node, Document document) throws Exception {
        NodeList nodes = node.getChildNodes();

        for (int i = 0; i < nodes.getLength(); i++) {
            Node nd = nodes.item(i);

            if (nd.getNodeType() == Node.ELEMENT_NODE && nd.getNodeName().equals("build")) {
                this.buildNode = nd;
            }

            if (nd.hasChildNodes()) {
                Node attr = nodes.item(i);
                findBuildNode(attr, document); // recursion
            }
        }
    }

    /**
     * Recursive Method to find the project node
     * 
     * @param node - actual node
     * @param document - root document
     * @throws Exception
     */
    public void findProjectNode(Node node, Document document) throws Exception {
        NodeList nodes = node.getChildNodes();

        for (int i = 0; i < nodes.getLength(); i++) {
            Node nd = nodes.item(i);

            if (nd.getNodeType() == Node.ELEMENT_NODE && nd.getNodeName().equals("project")) {
                this.projectNode = nd;
            }

            if (nd.hasChildNodes()) {
                Node attr = nodes.item(i);
                findProjectNode(attr, document); // recursion
            }
        }
    }

    /**
     * Returns the Surefire Configuration Node
     * 
     * @return configuration - the node to configure the surefire plugin
     */
    public Node getSurefireConfigurationNode() {
        return this.configuration;
    }

    /**
     * Generates the tags of the maven surefire plugin, if some tags are missing
     */
    public void generateSurefirePlugin() {
        if (this.buildNode == null) {
            Element buildNode = this.document.createElement("build");

            this.projectNode.appendChild(buildNode);
            this.buildNode = buildNode;
        }

        if (this.pluginsNode == null) {
            Node pluginsNode = this.document.createElement("plugins");
            this.buildNode.appendChild(pluginsNode);
            this.pluginsNode = pluginsNode;
        }

        if (this.surefirePluginNode == null) {

            Node pluginNode = this.document.createElement("plugin");
            this.pluginsNode.appendChild(pluginNode);

            Node groupId = this.document.createElement("groupId");
            groupId.appendChild(this.document.createTextNode("org.apache.maven.plugins"));
            Node artifactId = this.document.createElement("artifactId");
            artifactId.appendChild(this.document.createTextNode("maven-surefire-plugin"));
            Node version = this.document.createElement("version");
            version.appendChild(this.document.createTextNode("2.4.3"));

            pluginNode.appendChild(groupId);
            pluginNode.appendChild(artifactId);
            pluginNode.appendChild(version);

            this.surefirePluginNode = pluginNode;
        }

        if (this.configuration == null) {
            Node configuration = this.document.createElement("configuration");
            this.surefirePluginNode.appendChild(configuration);

            this.configuration = configuration;
        }
    }

    /**
     * Check, if the a node has a special parameter as Node
     * 
     * @param node - parent node
     * @param paramterNode - parameter tag
     * @return the node, if the node name is equal, else null
     */
    public static Node checkIfNodeHasElement(Node node, Node paramterNode) {
        NodeList nodes = node.getChildNodes();

        for (int i = 0; i < nodes.getLength(); i++) {
            Node nd = nodes.item(i);
            if (nd.getNodeName().equals(paramterNode.getNodeName())) {
                return nd;
            }
        }

        return null;
    }

    /**
     * Validates the surefire configuration
     * 
     * @return false, if a parameter tag is not supported form the surefire
     *         plugin
     */
    public boolean validateSurefirePlugin() {
        if (this.configuration != null) {
            NodeList nodes = this.configuration.getChildNodes();
            for (int i = 0; i < nodes.getLength(); i++) {
                Node nd = nodes.item(i);

                if (nd.getNodeType() == Node.ELEMENT_NODE) {
                    if (!this.allowedParameters.contains(nd.getNodeName())) {
                        return false;
                    }
                }
            }
        }
        return true;
    }
}
